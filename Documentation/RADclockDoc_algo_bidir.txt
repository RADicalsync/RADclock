/*
 * Copyright (C) 2019 The RADclock Project (see AUTHORS file)
 *
 * This file is part of the radclock program.
 */

RADclock documentation.
Written by Darryl Veitch
================================

Convention to point within code:
	/dir/dir/file : functionorstructureinfile

Glossary:
 KV = Kernel Version  ( of the RADclock/FFclock modified kernel )
 IPC = Inter-Process Communication
 OS = Operating System
 SMS = SHared Memory
 FF = FeedForward
 FFcounter = a FF compatible counter
 algo = algorithm, the RADclock clock synchronization algorithm


==============================================================
Summary
=======

**** This is a partial, very much at work in progress document! ****


This documents the RADclock (algo)rithm itself and its interaction with the
remainder of the RADclock daemon code, and the FF kernel.
The source files are in RADclockrepo/radclock/radclock
	sync_bidir.c
The main associated header files are
	sync_algo.h
	sync_history.h

In addition there is related code in RADclockrepo/radclock/libradclock/ in
	..
and
	radclock-private.h



==============================================================
Introduction
============


/*
 * Structure representing the radclock parameters
 */
struct radclock_data {
	double phat;                  // very stable estimate of long term counter period [s]
	double phat_err;              // estimated bound on the relative error of phat [unitless]
	double phat_local;            // stable estimate on shorter timescale period [s]
	double phat_local_err;        // estimated bound on the relative error of plocal [unitless]
	long double ca;               // K_p - thetahat(t) [s]  (leaps not included!)
	double ca_err;                // estimated error (currently minET) in thetahat and ca [s]
	unsigned int status;          // status word (contains 9 bit fields)
	vcounter_t last_changed;      // raw timestamp T(tf) of last stamp processed [counter]
	vcounter_t next_expected;     // estimated T value of next stamp, and hence update [counter]
	vcounter_t leapsec_expected;  // estimated vcount of next leap, or 0 if none
	int leapsec_total;            // sum of leap seconds seen since clock start
	int leapsec_next;             // value of the expected next leap second {-1 0 1}
};





Research papers describing the RADclock algorithm are ? and ? .


==============================================================
Algorithm Overview and Key Principles
============================

- clock model and terminology


==============================================================
Input and Output
============================


==============================================================
RADclock versus the algo
============================


- algo protection wrt leap seconds

- native  (leap free) Cabs versus UTC Cabs,  relation to radclock_data



==============================================================
Leap second treatment
============================

All leapsecond processing is contained within process_stamp(), which owns and sets
the rad_data member of the handle which defines the RADclock.
The algo itself sets algodata variables, but does not update rad_data.
The RADclock absolute clock Ca(t) is effectively the UTC clock in vogue at the
counter origin epoch, not updated by subsequent leaps, which we term the `native RADclock'.
In radclock-private.h, the functions  read_RADabs_{native,UTC} make the
distinction clear.

process_stamp(handle, algodata)
	get_next_stamp(handle, stamp_source, &stamp);
	leap second processing
	RADalgo_bidir(handle, algodata, &stamp_noleap, ..)); // update native RADclock
	update handle->rad_data                 					// update UTC RADabsclock
	push updates as needed (kernel, SMS..)
		  
There are several issues involved in managing leap seconds, which is a vexed issue
prone to errors, many servers running FB system clocks fail to get this right.
The issues include :
  - finding out that a leap is coming up, and making sure this is reliable
  - ensuring the leap occurs exactly when it should
  - ensuring the actions taken at a leap are correct
  - arranging for different copies of parameters underlying the clock are
    updated/actioned synchronously so that the leap occurs consistently across
    the daemon, libprocess, and the kernel.
  - ensuring the FFclock has the right leap information and can act on it with
    minimal computation
    
    

----------------------- Work in progress

	int leapsec_total;				// sum of leap seconds seen since clock start
	int leapsec_next;					// value of the expected next leap second {-1 0 1}
	vcounter_t leapsec_expected;	// estimated vcount of next leap, or 0 if none coming


- Do need leap awareness in both
     daemon:  - gets UTC timestamps, must subtract out leaps for algo as usual
				  - gets LI bits
					 - best to send info to leap decision maker only, not take on this role!
				  - reads leapsec file?  how coordinate with LI info to make final decision?
				  - API: option to return time without leap info if asked?
	  kernel:  - how execute the jump at exactly the right time?

- ffclock_info.leapsec_adjustment logic: since counter set, can precalculate the correct
 leapsec information  ( same calculation as in ffclock_windup )
 PROVided this info doesnt change due to a FFdata update


Leap issues:
  - what to pass to algo, what else the kernel needs
  - how to handle historical conversions, ie if passed a vcounter before a leap, to a clock that already built in the leap..
  - how much in kernel compared to in daemon, duplicate functionality? complementary
  - do the leap fields in ffclock_data  get updated inbetween daemon updates?
    - nice to keep the daemon structure of updates only at stamps
	 - but what if daemon dies?  still want to pick up extra leaps to add into clock reading.
  - in bpf.c:bpf_bintime2ts   UTC is obtained by adding a constant to the monotonic (uptime)
    FB default, but this implies leaps must be built into  bootimebin !





==============================================================
RTT Tracking Algorithm
============================


==============================================================
Difference Clock Algorithm
============================


==============================================================
pclocal Clock Algorithm
============================


==============================================================
plocal Selection Control
============================

	  C_a(t) = p*T(t) + K_p  - thetahat  +  (T(t) - T(tlast))*(plocal-p)    (1)

The plocal algorithm is always running, although in warmup, the actual value of
plocal to set to that of pbar.

Whether or not the plocal refinement will be actually used or not is configurable.
The actual clock read functions, used by both the daemon and user radclocks, are
  	read_RADabs_native  leap-free absolute clock of the algo
 	read_RADabs_UTS	  UTC absolute clock, which includes leaps
The clocks can be read into the future or past wrt the rad_data used.

Each takes a plocal flag, which controls if the plocal variable is used.
For most purposes, including the time sent in client or server NTP packets,
and the value pushed to the kernel, the flag is set to PLOCAL_ACTIVE, with a typical default  1 = active = using plocal.
The radclock library routines instead use clock->local_period_mode  to select
per-clock preferences passed to read_RADabs_{native,UTC} .
Thus all instance of radclock (user(s) or daemon), can set this independently.
 
For the daemon, currently PLOCAL_ACTIVE is hardwired in radapi_getset.c :
/* Global setting for use of plocal refinement for in-daemon timestamping */
# define PLOCAL_ACTIVE	0		//  {0,1} = {inactive, active}
as typically the algorithm should be used, and this is a expert-level decision.

For the user radclocks running in libprocesses, it can be set as described under
the Library functions  section of RADclockDoc_library.




==============================================================
Absolute Clock Algorithm
============================


==============================================================
Coping with timecounter (tc) change
============================


KV>2 FreeBSD only:

			err = sysctlbyname("kern.timecounter.hardware", &hw_counter[0],


radclock-private.h:  clock.hw_counter    member  // used in pthread_dataproc.c only

pthread_raw.c:process_stamp
  - is after RADalgo_bidir  which is unfortunate
        (though insane_bidir_stamp will probably catch it )
	   - should be the first thing to do, wont be able to trust stamp, and need
		  to clear stamp queue of data that may never match.
		  
  - comments indicate a work in Progress
  - verbose says  "Reinitializing radclock"  but I see no re-start !

On kernel side, see FFclockDoc_FreeBSD under  windup calls.

// From kernel doc:
The current tc is accessible via
sysctlbyname("kern.timecounter.hardware", &hw_counter[0], ..)   // see if tc there or changed
and is recorded in the global  clock.hw_counter[32] , initialized in radclock_init_vcounter.
It is acted on in pthread_dataproc.c:process_stamp  just before the pushing of
a fresh parameter update to the kernel. If a change is seen, the update is skipped
(hence ffclock_windup had earlier just advanced a standard tick, with no update)
and the algo reinitialized (however it is not clear if this is done properly).
For more details see the algo documentation.



/* TODO
	- put in a better why to catch a tc and restart the daemon - it is a rare event, just do it
	   - now that ffclock_change_tc pushes the almost reset FFdata to the global, there is a pretty
	    foolproof ways to confirm this from the daemon side - though just checking that the tc has changed still says
	    is all:  the daemon is not going to check until the next valid stamp comes through, unless you add more to the
	    asynchronous status part, which you must do anyway to support telemetry
	- check that algo re-init is correct and complete if not doing a full restart
*/





==============================================================
FFcounter timestamping bypass/passthrough mode
======================================

Bypass mode enables a TSC counter, if available, to be accessed more directly
than its recreated FFcounter form within the tc mechanism.
See the FFclockDoc_FreeBSD for an introduction.

The goal of the daemon side code is to take advantage of the bypass mode if possible.
The logic is performed within ffkernel-*.c:radclock_init_vcounter ,
currently only supported properly for FreeBSD.

Taking advantage means setting the clock->get_vcounter  fn pointer to either
radclock_get_vcounter_{syscall,rdtsc} .
If rdtsc() is not yet defined, a standard definition is provided.

The code first echos the current counter and the mode taken from the kernel.
If the mode is active, this implies that the TSC is the counter, and so the daemon
can select rdtsc() (but this assumption is tested).
If not, but if TSC is the tc counter and an internal configuration
variable  activateBP  indicates bypass is desirable, then the daemon first activates
the mode.

If activateBP=0, it is still easy to activate bypass at any time using
	sysctl kern.sysclock.ffclock.ffcounter_bypass=1

The daemon calls radclock_init_vcounter but does not in fact use the counter reading calls,
and so does not use bypass in that sense, as it obtains the key raw timestamps from bpf.
Libprocesses will use radclock_init_vcounter, and can benefit individually from a bypass that
may have been activated (or a counter that was changed to TSC then bypass activated)
at some point after the daemon was launched, eg just before the
libprocess was launched via sysctl, or within some related research program.




==============================================================
Packet Timestamp Mode Selection and Testing
============================

See the FFclockDoc_FreeBSD for details on the _T_ timestamp type language, header size issues,
and the bpf -> pcap mapping.


  - Tests in extract_vcount_stamp_v3  are being performed per-pkt,
    but should be performed once only, perhaps at compile time
    
    
    
    


==============================================================
Warmup Phase
============================




==============================================================
States and Status
============================





==============================================================
Poll Period changes
============================

- restart/ rehash allows?
- algo still does right?
- how to connect with the adjusted_period  of TRIGGER and the starve_ratio idea?
  should the algo also adopt  adjusted_period  internally?


==============================================================
Configuration
============================

- initial

- under restart
   - init from kernel
   - changing pollperiod





=================================================================================
=================================================================================
=================================================================================
TODO:  Other major documentation topics:

 
====================================
Urgent

Package building
 - autohell guide, versioning, cheatsheet


RADclock server (NTP_SERV)



====================================
Can wait

RADclock Package Overview
	- include man pages

NTP packet generation (

 detail)


IEEE1588 support

VM support



