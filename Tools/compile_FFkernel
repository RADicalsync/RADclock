#!/usr/bin/env bash

# Will attempt a kernel build and install of FFclock.
# Assumes the FFCLOCK kernel config file is already installed
# Assumes you are in the build directory, will FFfiles already copied in.
# FreeBSD: will try a fast build, or a full one if -c option given

# This file adopts the (simplified) compile sections of the VM script
# quick_FF_build

if [ `id -u` -ne 0 ]; then
	echo "Sorry `id -un`, this must be run as root"
	exit 0
fi

OS=`uname -s`
case $OS in
	FreeBSD)
		OSv=`uname -r | cut -d'-' -f1`
		SourceDir="/usr/src";;
	Linux)
		OSv=`uname -r | cut -d'.' -f1-2`
		SourceDir="/usr/src/linux-source-$OSv";;
esac

Based=`pwd`
[[ -e build.log ]] && cp -f $Based/build.log $Based/build_backup.log

pushd $SourceDir
echo

#-----------------------------------------------------------------------------#
if [ $OS == "Linux" ]; then

	echo " *** Remember to answer any interactive qns regarding new packages!!"
	echo " *** Use:  tail -f build.log  to monitor and check compile progress"
	if [[ "$1" != "-f" ]]; then
		echo "Now trying to build clean, executing 'make clean; make deb-pkg' "
		make clean > $Based/build.log
		make deb-pkg >> $Based/build.log 2>&1			# make the kernel in the form of a package
	else
		echo "Now trying to build fast, executing 'make deb-pkg'"
		make deb-pkg > $Based/build.log	2>&1			# make the kernel in the form of a package
		echo
	fi

	if [ $? -eq 0 ]; then
		echo "Build successful, now installing generated deb packages"
		echo

#		echo "First check to see if deb creation altered configuration: "
#		ConfigFile="$SourceDir/.config"
#		echo "Check in source config file $ConfigFile"
#		grep signing_key $ConfigFile >> /dev/null
#		if [ $? -ne 0 ]; then
#			echo "  - signing_key not found in $ConfigFile, re-inserting"
#			scripts/config --set-str MODULE_SIG_KEY certs/signing_key.pem
#		fi

		# Installation
		tail -3 $Based/build.log
		echo
		InstallPkg="dpkg -i `ls -t ../linux-image-$OSv*.deb |head -1`"
		echo "** Installing image with: $InstallPkg"
		$InstallPkg
		echo
		InstallPkg="dpkg -i `ls -t ../linux-headers-$OSv*.deb |head -1`"
		echo "** Installing headers with: $InstallPkg"
		$InstallPkg
		echo
		InstallPkg="dpkg -i `ls -t ../linux-libc-dev_$OSv*.deb |head -1`"
		echo "** Installing libc-dev with: $InstallPkg"
		$InstallPkg


		# Configuration checks, but not action taken
		echo
		echo "Ready to reboot, final check on configuration to ensure success: "
		ConfigFile="$SourceDir/.config"
		echo "Check in source config file $ConfigFile"
		grep signing_key $ConfigFile >> /dev/null
		if [ $? -ne 0 ]; then
			echo "  - signing_key not found in $ConfigFile, re-inserting"
			scripts/config --set-str MODULE_SIG_KEY certs/signing_key.pem
		fi

		echo
		echo All good, you can snapshot then reboot your new FFtest kernel with "shutdown -r now"
	else
		echo
		echo '** build failed ** inspect build.log to find out why'
	fi
fi
#-----------------------------------------------------------------------------#


#-----------------------------------------------------------------------------#
if [ $OS == "FreeBSD" ]; then

if [[ "$1" == "-c" ]]; then
	echo "Now trying to build clean, executing 'make -j2  buildkernel KERNCONF=FFCLOCK'"
	make -j2  buildkernel KERNCONF=FFCLOCK > $Based/build.log
else
	echo "Now trying to build fast, executing 'make -j2 -DNO_CLEAN buildkernel KERNCONF=FFCLOCK'"
	make -j2 -DNO_CLEAN buildkernel KERNCONF=FFCLOCK > $Based/build.log
fi

if [ $? -eq 0 ]; then    # if previous command exits with success
	tail -3 $Based/build.log
	echo Build successful, now executing 'make installkernel KERNCONF=FFCLOCK'
	make installkernel KERNCONF=FFCLOCK		> $Based/install.log
	echo All good, you can reboot.
else
	echo
	echo '** build failed ** inspect build.log to find out why'
fi

fi		# OS=FreeBSD
#-----------------------------------------------------------------------------#

popd
