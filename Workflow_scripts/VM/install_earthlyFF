#!/bin/bash

# This script takes deb packages for a new kernel and installs them.
# Currently packages built by  earthly +{deb,arm}-kernel-build-patched  in the RADclock repo.
# NOTE:  on the Pi, the /boot partition now appears under /boot/firmware

echo "Installing the earthly generated FFclock deb packages" 

OS=`uname -s`
if [ $OS != "Linux" ]; then
	echo "Sorry, this script is only meant for Linux at present, you are on $OS"
	exit
fi


# Pi detection 
OnPi="No"
Arch=`uname -m`
if [ $Arch == "aarch64" ]; then
        if [ $OS == "Linux" ]; then
                OnPi="Yes"
                ServerHome="darryl@192.168.1.104"
                Repo="Papers/TSCclock/Programs/V4/RADclock_mycurrent"
                echo "I see $OS on $Arch, I infer you are on a Pi. Expecting repo at $ServerHome"
        fi
fi

# Default is to install a patched kernel, see if an unpatched is requested
if [[ "$1" == "-n" ]]; then
   echo "=== Will install an UNpatched kernel ==="
   Patchtype="kernel"
else
   echo "=== Will install an FF-patched kernel ==="
   Patchtype="kernel-patched"
fi

# Get the location of packages generated by earthly
if [ $OnPi == "Yes" ]; then
	RADdir="$ServerHome:$Repo"
	PkgDir="$RADdir/artifacts/$Patchtype/arm64"
else
	Based="$HOME/FFkernel_Work"
	RADdir="$Based/V4_mountedfrom_Icaro/RADclock_mycurrent"
	PkgDir="$RADdir/artifacts/$Patchtype/amd64"
fi

# Get thelatest packages
cd /usr/src
echo "** Grabbing packages from $PkgDir"
scp $PkgDir/* .
ls -ltr |tail -6
Kname=`ls -tr |tail -3 |grep  linux-image | cut -d'_' -f1 |cut -d'-' -f3-`
NewSUBLEVEL=`echo $Kname |cut -d'.' -f3`
echo "Earthly packages are of version $Kname"
echo


# If sublevel of packages is different, source and config actions needed
if [ $OnPi != "Yes" ]; then
	echo "=============================================================="
	update_linuxSource -d
	echo "=============================================================="
 	echo "*********** Returning, now in `pwd` *************"
fi


# Install debian packages
echo
echo "** Newest packages are for a $Kname kernel, Installing them"
echo "   Installing headers"
dpkg -i linux-headers*$Kname*.deb
echo
echo "   Installing libc"
dpkg -i linux-libc*$Kname*.deb
echo
echo "   Installing image"
dpkg -i linux-image*$Kname*.deb
echo "========================================================================"


# Setup next boot
echo
if [ $OnPi == "Yes" ]; then
	echo "** Set up the new Pi kernel to boot next time"
	# Copy the new kernel to the boot partition 
	cd /boot/firmware
	ls -altr
	cp ../{initrd.img,vmlinuz}-$Kname*   . 
	
	# Additional firmware blackmagic to ensure the new kernel can talk to hardware 
	echo
	cp -f /usr/lib/linux-image-$Kname/broadcom/*  .
	ls -altr
	
	# Set it to boot the new kernel
	echo
	sed -i"" -E "s/initrd\.img-.*/initrd\.img-$Kname/; s/vmlinuz-.*/vmlinuz-$Kname/"   config.txt
	cat config.txt
	echo
	echo '==== Done: "shutdown -r now" should bring up the new kernel'
else
	OSv=`uname -r | cut -d'.' -f1-2`
	SourceDir="/usr/src/linux-source-$OSv"
    
	echo "Ready to reboot, final check on configuration to ensure success (check, no action): "
    ConfigFile="$SourceDir/.config"
    echo "Check signing_key in source config file $ConfigFile"
    grep signing_key $ConfigFile >> /dev/null
    if [ $? -ne 0 ]; then
        echo "  --> signing_key not found in $ConfigFile"
    fi

	echo ==== Done:, snapshot then reboot with "shutdown -r now"
fi
