#!/usr/bin/env bash
# #!/bin/bash

# This script takes deb packages for a new kernel and installs them.
# Currently packages built by  earthly +{deb,arm}-kernel-build-patched  in the RADclock repo.
# NOTE:  on the Pi, the /boot partition now appears under /boot/firmware
#
# options:
#     -e  dont fetch the debs, just use those already there
#     -n  use debs for the unpatched kernel (if fetching them)
#     -vm use patched saved from a VM in FullSource_Linux instead of earthly

OS=`uname -s`
if [ $OS != "Linux" ]; then
	echo "Sorry, this script is only meant for Linux at present, you are on $OS"
	exit
fi

# Pi detection 
OnPi="No"
Arch=`uname -m`
if [ $Arch == "aarch64" ]; then
	if [ $OS == "Linux" ]; then
		OnPi="Yes"
		ServerHome="darryl@192.168.1.104"
		Repo="Papers/TSCclock/Programs/V4/RADclock_mycurrent"
		echo "I see $OS on $Arch, I infer you are on a Pi. Expecting repo at $ServerHome"
	fi
fi


### Locate and obtain the packages, and install in /usr/src
cd /usr/src

## Ensure the .debs we want are installed
if [[ "$1" == "-e" ]]; then
	echo "Will use the most recent of existing .debs in /usr/src"

else

	# Default is to install a patched kernel, see if an unpatched is requested
	if [[ "$1" == "-n" ]]; then
		echo "=== Will install an UNpatched kernel ==="
		Patchtype="kernel"
	else
		echo "=== Will install an FF-patched kernel ==="
		Patchtype="kernel-patched"
	fi


	## Select the target kernel version
	#  TODO:  apply checks, and make this smarter, though cant predict what want from running system
	TargetV="5.10.178"
	TargetV="6.1.27"

	# Get the location of packages generated by earthly
	if [ $OnPi == "Yes" ]; then
		RADdir="$ServerHome:$Repo"
		PkgDir="$RADdir/artifacts/$Patchtype/arm64"
	else
		Based="$HOME/FFkernel_Work"
		if [[ "$1" == "-vm" ]]; then	# stored debs from VM
			echo "Installing deb packages saved from a VM"
			PkgDir="$Based/V4_mountedfrom_Icaro/FullSource_Linux/$TargetV/FF" # hack
		else							# from earthly
			echo "Installing the earthly generated FFclock deb packages"
			RADdir="$Based/V4_mountedfrom_Icaro/RADclock_mycurrent"
			PkgDir="$RADdir/artifacts/$Patchtype/amd64"
#			PkgDir="$PkgDir/$TargetV"
		fi
	fi

	# Get the latest packages
	echo "** Trying to grab $TargetV packages from $PkgDir"
	scp $PkgDir/*$TargetV*.deb .

fi

## Look at what we have
ls -lptr |tail -6
OSfullv=`ls -tr |grep '\.deb' |tail -3 |grep  linux-image | cut -d'_' -f1 |cut -d'-' -f3`
NewSUBLEVEL=`echo $OSfullv |cut -d'.' -f3`
echo "Packages to be installed are of version $OSfullv"
echo


# If sublevel of packages is different, source and config actions needed
if [ $OnPi != "Yes" ]; then
	echo "=============================================================="
#	update_linuxSource
	echo "=============================================================="
	echo "*********** Returning, now in `pwd` *************"
fi


# Install debian packages
echo
echo "   Installing image"
dpkg -i linux-image*$OSfullv*.deb
echo
echo "** Newest packages are for a $OSfullv kernel, Installing them"
echo "   Installing headers"
dpkg -i linux-headers*$OSfullv*.deb
echo
echo "   Installing libc"
dpkg -i linux-libc*$OSfullv*.deb
echo "========================================================================"


# Setup next boot
echo
if [ $OnPi == "Yes" ]; then
	echo "** Set up the new Pi kernel to boot next time"
	# Copy the new kernel to the boot partition 
	cd /boot/firmware
	ls -altr
	cp ../{initrd.img,vmlinuz}-$OSfullv*   .
	
	# Additional firmware blackmagic to ensure the new kernel can talk to hardware 
	echo
	cp -f /usr/lib/linux-image-$OSfullv/broadcom/*  .
	ls -altr
	
	# Set it to boot the new kernel
	echo
	sed -i"" -E "s/initrd\.img-.*/initrd\.img-$OSfullv/; s/vmlinuz-.*/vmlinuz-$OSfullv/"   config.txt
	cat config.txt
	echo
	echo '==== Done: "shutdown -r now" should bring up the new kernel'
else
	OSv=`uname -r | cut -d'.' -f1-2`
	SourceDir="/usr/src/linux-source-$OSv"

	echo "Ready to reboot, final check on configuration to ensure success (check, no action): "
	ConfigFile="$SourceDir/.config"
	echo "Check signing_key in source config file $ConfigFile"
	grep signing_key $ConfigFile >> /dev/null
	if [ $? -ne 0 ]; then
		echo "  --> signing_key not found in $ConfigFile"
	else
		echo "  key is good"
	fi

	echo ==== Done:, snapshot then reboot with "shutdown -r now"
fi
