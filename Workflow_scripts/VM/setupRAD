#!/usr/bin/env bash
# #!/bin/bash

# Pi detection 
Arch=`uname -m`
OS=`uname -s`
OnPi="No"
if [ $Arch == "aarch64" ]; then
	if [ $OS == "Linux" ]; then
		OnPi="Yes"
		ServerHome="darryl@192.168.1.104"
		Repo="Papers/TSCclock/Programs/V4/RADclock_mycurrent"
		echo "I see $OS on $Arch, I infer you are on a Pi. Expecting repo at $ServerHome"
	fi
fi

Based="$HOME/FFkernel_Work"
RADbuild="$Based/RADclock_working"
echo -e "${BLE}Configuring RADclock for the first time, assuming build directory $RADbuild exists{CLE}$"

echo
echo "*** Get current source ***"
update_workingRADclock --delete			# delete may not do everything you want..


# Regenerate git-dependent M4 version macro.  Requires git installed on source machine.
echo
echo "*** Generating distribution version macro from repo dir [needed for m4 for configure] ***"
if [ $OnPi == "Yes" ]; then
	ssh $ServerHome "cd $Repo; version.sh"
	RADsource="$ServerHome:$Repo"
	scp $RADsource/version.m4 $RADbuild 
	#ssh $ServerHome "cd $Repo; \rm version.m4"
else
	RADsource="$Based/V4_mountedfrom_Icaro/RADclock_mycurrent"
	cd $RADsource
	version.sh 						# must run in repo dir, has git command executed on build machine
	cat version.m4
	mv -f version.m4  $RADbuild		# version.m4 never tracked by git, not cleaned by cleanbuildtree
fi



echo
echo "*** Regenerating configure ***"
cd $RADbuild
autoreconf -if

echo
echo "*** Configuring quietly ***"
configure -q

echo
echo "*** Making radclock  ***"
make &> RADbuild.log

echo
echo "*** Checking local radclock runs with 'radclock -h' ***"
radclock/radclock -h

if [ $? -eq 0 ]; then
	echo
	echo "*** Installing radclock  ***"
	sudo make -s install
	echo
	ls -al `which -a radclock`
else
	echo
	echo -e "${RED}*** Radclock build failed (see RADbuild.log), skipping installation ***${CLE}"
fi

echo "------------------------------------------------------------------------------"
