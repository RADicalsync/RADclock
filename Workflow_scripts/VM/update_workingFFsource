#!/bin/bash

# Take an optional parameter specifying the full version you want
#   if absent, will try to find a version which exactly matches running system
#   if that fails:
#       FreeBSD:  gives up
#       Linux:    tries to find the closest match, gives up if fails

echo Updating working FF Source

# Target dir
Based="$HOME/FFkernel_Work"
FFtarget="$Based/FFclock_working"
# Source dir
MountPoint="V4_mountedfrom_Icaro"
Repo="$Based/$MountPoint/RADclock_mycurrent"
KernDir="$Repo/kernel"

## Select the source directory FFsource from the repo
#FFsource=`findSourceDir $KernDir | tail -1`   # if wrote as a fn, rtn via final echo

## Select the source directory FFsource from the repo
OS=`uname -s`

case $OS in

	FreeBSD)
		if [[ "$1" != "" ]]; then
			OSv=$1
		else
			OSv=`uname -r | cut -d'-' -f1`
		fi
		FFsource=$KernDir/freebsd/FreeBSD-$OSv/CurrentSource

		if [[ ! -e $FFsource ]]; then
			echo "$FFsource dir not available in repo"
			exit
		fi;;

	Linux)
		OSfullv=`uname -r`			# VERSION.PATCHLEVEL.SUBLEVEL current running
		OSv=`echo $OSfullv | cut -d'.' -f1-2`  	 # VERSION.PATCHLEVEL = point release
		#OSfullv=$OSv".0"		# did this before changed dir names
		if [[ "$1" != "" && "$1" != "-s" ]]; then
			OSusing=$1
			if [[ ! -e $KernDir/linux/$OSusing ]]; then
				echo "Version $OSusing does not exist in the repo"
				exit
			fi
		else
			if [[ -e $KernDir/linux/$OSfullv ]]; then
				OSusing=$OSfullv		# Found exact match to current system, will use
			else
				echo -n "Couldn't find running version $OSfullv directory in repo"
				OSusing=`ls $KernDir/linux/ |grep "$OSv" |tail -1 |cut -d'.' -f1-3 |tr -d '/'`
				if [[ ! -e $KernDir/linux/$OSusing ]]; then
					echo
					echo -n "Looked for a close $OSv match but didn't find one - "
					echo "don't know what you what, giving up"
					exit
				else
					echo " - trying $OSusing instead"
				fi
			fi
		fi
		FFsource=$KernDir/linux/$OSusing/CurrentSource

		# Optionally replace entire source tree before patching 
		if [[ "$1" == "-s" ]]; then
			#Kname=$OSv.235				# should read desired SUBLEVEL from command line option 
			Installd="/usr/src/linux-source-$OSv"		# dirname always VERSION.PATCHLEVEL, regardless of SUBLEVEL
			FullSrcDir="$Repo/artifacts/kernelsourcefiles/deb-$OSusing/linux-source"
			echo " **before patching, Copying full source tree at $FullSrcDir to $Installd -- could take a while"
			scp -r $FullSrcDir $Installd 
			ls -ltr /usr/src |tail -3
		fi;;
esac


echo "  Differences with current repo version before the update :"
echo " ----------------------------------------------------------------------------------"
diff $FFsource  $FFtarget	| grep -v Only
echo " ----------------------------------------------------------------------------------"
echo


## Copy over All files present from the source directory to the local working copy
#   new files:  futureproof,  must modify move_into_srctree to `activate' any changes
#   old files:  must be removed manually on VM, or made impotent by modifying  move_into_srctree
echo "  rSyncing from  $FFsource  -->  "
echo "                 $FFtarget"
rsync  -aic $FFsource/*	$FFtarget  --delete
#rsync $1  -aic $FFsource/{kern_{ffclock,tc}.c,subr_rtc.c,timeffc.h,bpf.{c,h},_ffcounter.h,if_*.c}	$FFtarget


## Copy over some include header files
case $OS in
	FreeBSD)
		Included="/usr/include"
		echo "  Also copying header files into $Included"
		\cp $FFtarget/{timeffc,_ffcounter}.h	$Included/sys/
		\cp $FFtarget/bpf.h			$Included/net/;;
	Linux)
		Included="/usr/include"
#		echo "  Also copying header files into $Included"
#		\cp $FFtarget/ffclock.h	$Included/linux/
		#Included="/usr/src/linux-source-$OSv/include/"
		#echo "  On Linux, not yet copying header files into $Included or anywhere else"
esac
