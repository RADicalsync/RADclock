#!/usr/bin/env bash
# #!/bin/bash

#####
# This script implements the port loop based approach to port FF code from an
# Old to a New version of the OS, in the following steps:
#
## Phase 1 of script:   "portloop"
# Head on master, create new branch N
# 	(commit 1):  unpatched O-FFfiles    [ call this O ]
# 	(commit 2):  unpatched N-FFfiles    [ call this N ]
# 	(commit 3):  current O-FFfiles      [ call this O+ ]
# 	(NPort)   :  apply O->N patch [by cherry-picking (2)] to the WD of O+ (3)
#                to obtain a first cut Naive Port- not committed!
#
#  port          O --- N --- O+ --{NP}
#               /
#  master  --- H
#
## Manual outside the script:
#    Finish NPort (resolve conflicts, other changes, portloop tweaks; git add .)
#      - test in a VM, and perfect as needed to generate N+
#    This includes deletion of files with no FF content not actually needed,
#    and more rarely, addition of new FFfiles.
#    Have to add new dir to Xcode project to enable CR on it.
#    Add additional cleanup commits if needed (hopefully not).
#
## Phase 2 of script:  "portloop -c"
#   Visualize final N+: ask if happy to proceed
# 	(commit 4):  the full tested port   [ call this N+ ]
# (commit 5):  merge commit onto master
#
#  port          O --- N --- O+ --- N+
#               /                    \
#  master  --- H --- (â‰¥0 commits) --- N'+
#
# Following (NPort), additional cleanup commits may be created inbetween (4) and (5),
# but these are not handled by the script.  Options are provided for the merge commit
# message to automate the 2 simple cases (no conflict or trivial conflict),
# and to seed the commit message if more complex.
#
# If have already completed port in the TestRepo, and now repeating in real repo,
# have option at end of Phase 1 to transfer the final FFfiles into the repo.
# BUT! use TestRepo with care, Workflow script changes often made, and need to be
#      in the real repo for use in the VM, or are there by accident. Transfer
#      them before committing in either repo if needed, or use stash.
#
# The SeedingCURRENT parameter is used to support the initial step for the
# re-tracking of FreeBSD-CURRENT after a long break.
# Once used, "retrack" (run in the VM) continues the tracking process on master
# without any further loops.
#
# The only files ever added for commit are those in the destination NewFF dir.
# It is safe to use portloop without touching other uncommitted changes on master.
#
# Earthly based workflow:
#   earthly +deb-kernel-build  will pull & store latest docker-accessible sublevel docV source
#   This is then available here as a port target by setting Norigin="" and New="docV"
#   Phase 1 of portloop then makes a Nport and later N+ available as the WD in the loopbranch.
#   This is then available to +deb-kernel-build-patched to generate a docV-FFkernel .
#   Test ports and N+ can be compiled using VM workflow (slower but more familiar
#   diagnostics, or earthly (faster). Once port is finalised, earthly can be used
#   by others (faster, easier reproducible workflow).


# Base parameters
Home="/Users/darryl/Papers/TSCclock/Programs/V4"
RealRepo="$Home/RADclock_mycurrent"
TestRepo="$Home/TestingGround/PortloopRepoBWorm"

# Input parameters
Repo=$RealRepo      # select from {Real,Test}Repo
SeedingCURRENT="n"  # if loop is to re-seed tracking of FreeBSD CURRENT
OS='linux'          # select from {freebsd,linux}
Oorigin="VM"        # Linux only: distinguish between Earthly or VM origin of O version
Norigin="VM"        # Linux only: distinguish between Earthly or VM origin of N version
Old="4.19.235"      # O=Old is the current version to be advanced to N=New
New="4.19.260"
Old="5.10.106"
New="5.10.149"
Old="13.1"
New="14.0-CURRENT"
Old="5.10.149"
#New="5.10.179"
New="6.1.27"

# Setup Repo where the loop will be created
if [ "$Repo" == "$RealRepo" ]; then
	read -p "Loop set to be created in the real repo, proceed [Ny] ? " ans
	[[ "$ans" != "y" ]] && exit      # exit if success, ie if you dont get a "y"
else
	cd $Home
	if [[ "$1" == "" ]]; then
		echo "Loop port will be created in a fresh TestRepo: $Repo"
		read -p " This will wipe out any manual port there!! proceed [Ny] ? " ans
		[[ "$ans" != "y" ]] && exit  # exit if success, ie if you dont get a "y"
		# Initialize TestRepo
		rm -rf $TestRepo
		mkdir $TestRepo
		cd $TestRepo
		git clone $RealRepo .		# get latest commit, but nth modified in the WD
		git remote remove origin
	else
		echo "Phase 2 of Loop port will continue in existing TestRepo $Repo"
	fi
fi
cd $Repo	# to test, pretend you are running it in a real repo, except artifacts still in RealRepo


## All of the sources come from the RealRepo or above it, not the TestRepo
# Note: the OldOrig also exists in the repo, but is in another commit in a prior loop.
#   Could check it out, but would involve more work to copy it, then go back to Head.
if [ $OS == "linux" ]; then
	if [[ "$Oorigin" == "VM" ]]; then
		OldOrig="$Home/OriginalFFfiles_Linux/$Old/"					# O
	else
		OldOrig="$RealRepo/artifacts/kernelsourcefiles/deb-$Old/"	# O
	fi
	if [[ "$Norigin" == "VM" ]]; then
		NewOrig="$Home/OriginalFFfiles_Linux/$New/"					# N
	else
		NewOrig="$RealRepo/artifacts/kernelsourcefiles/deb-$New/"	# N
	fi
	OD=$Old			# dir of existing      ported FFfiles for O
	ND=$New			# dir where will place ported FFfiles for N
else
	OldOrig="$Home/OriginalFFfiles_FreeBSD/$Old/"		# O
	NewOrig="$Home/OriginalFFfiles_FreeBSD/$New/"		# N
	OD="FreeBSD-$Old"
	if [[ "$SeedingCURRENT" == "n" ]]; then
		ND="FreeBSD-$New"       # neme mirrors name of NewOrig dir
	else
		ND="FreeBSD-CURRENT"    # only one CURRENT tracking dir, name not versioned
		echo "** You are looping to re-start tracking of CURRENT, a special case. Target dir is $ND ***"
	fi
fi
OldFF="kernel/$OS/$OD/CurrentSource/"					# O+
NewFF="kernel/$OS/$ND/CurrentSource/"					# N+


# Test inputs
echo "================== Testing Inputs =================="
abort="False"

## Too many errors modes for FFfiles, must eyeball
echo
echo "==== Examining the FFfile input files ===="
echo

# Notes:
#   - use grep -v /  to count files only, not dirs (source dir may be there in earthfile case)
#   - counts are correct as based on ls, not ls -l that includes the 'total' line

if [[ ! -e $OldOrig ]]; then
	echo "O dir $OldOrig is missing!"
	abort="True"
else
	echo "*** In O ($Old) we have `ls -p $OldOrig |grep -v / |wc -l` files"
	ls -pl $OldOrig
fi
echo
if [[ ! -e $NewOrig ]]; then
	echo "N dir $NewOrig is missing!"
	abort="True"
else
	echo "*** In N ($New) we have `ls -p $NewOrig |grep -v / |wc -l` files"
	ls -pl $NewOrig
	echo
	diff $OldOrig $NewOrig  | grep "Only in" |sort
fi
echo
if [[ `ls $OldOrig |grep -v / |wc -l` -ne `ls $NewOrig |grep -v / |wc -l` ]]; then
	echo "Differing number of files in O and N"
fi
echo

if [[ ! -e $OldFF ]]; then
	echo "O+ dir $OldFF is missing!"
	abort="True"
else
	echo "*** In O+ we have `ls $OldFF |wc -l` files"
	ls -l $OldFF
	echo
	diff $OldOrig $OldFF  | grep "Only in" |sort
fi
echo

if [[ ! -e $NewFF ]]; then
	echo "N+ dir $NewFF is missing (normal for Phase 1)"
else
	echo "*** In N+ we have `ls $NewFF |wc -l` files"
	ls -l $NewFF
	echo
	diff $OldFF $NewFF  | grep "Only in" |sort
fi
echo


read -p "Happy with the input files [Ny] ? " ans
[[ "$ans" != "y" ]] && exit      # exit if success, ie if you dont get a "y"

#echo "Past test, into adhoc exit territory"
#exit


# Check git state is safe
loopbranch="PortLoop_$New"
currbranch=`git status |head -1 |cut -d' ' -f3`

##---------------- Phase 1:  seed loop; naive port  ---------------------------#
if [ "$1" == "" ]; then

	if [ $currbranch != "master" ]; then
		echo "Branch is $currbranch, needs to be master!"
		abort="True"
	fi
	git branch |grep "$loopbranch" > /dev/null
	if [ $? -eq 0 ]; then
		echo "Planned loop branch $loopbranch already exists!"
		abort="True"
	fi
	git status | grep "new file: "
	if [ $? -eq 0 ]; then
		echo "Files with "new" status fatal to cherry-pick! Make them untracked."
		abort="True"
	fi

	git status | grep Changes > /dev/null
	if [ $? -eq 0 ]; then
		read -p "** WD is not clean! need to stash? continue [Yn] ? " ans
		[[ "$ans" == "n" ]] && abort="True"
	fi

	echo
	if [ $abort == "True" ]; then
		echo "*** Something wrong with inputs or state, aborting ***"
		exit
	fi
	echo "================== Testing Done =================="
	echo


	####################################
	depth=2
	git logo --graph -$depth

	echo
	echo "============ Applying seed commits =============="

	# Create new branch and move to it
	git checkout -b $loopbranch
	#git branch

	# Create new dir, named after N, where the loop changes will live
	mkdir -p $NewFF		# creates both ND and ND/CurrentSource if needed

	# Seeding Stage 1	(O)
	echo
	cp  $OldOrig/*  $NewFF      # wont copy directory linux-source/ if present, good
	git add $NewFF
	git commit  -m"Seeding stage 1 of $OS port from $Old to $New [original $Old FFfiles in new dir]."

	# Seeding Stage 2	(N)
	echo
	# TODO: for FreeBSD, wipeout would be better, if Linux also, then replace with wipeout
	cp  $NewOrig/*  $NewFF      # using cp: results in a union of files
	git add $NewFF
	git commit  -m"Seeding stage 2: overlay original FFfiles from $New source."

	# Seeding Stage 3	(O+)
	echo
	\rm $NewFF/*                # wipeout to avoid union effect, but don't tell git!
	cp  $OldFF/*  $NewFF        # exact set of O+ files
	git add $NewFF
	git commit  -m"Seeding stage 3: wipeout files, replace with ported FFfiles in $OldFF."


	echo
	echo "===== Forming naive port O+ +(O->N) in WD via cherry-pick ========"

	# Automated initial naive port      Affects WD+SAonly, no new commit
	echo
	git cherry-pick -n HEAD^    # apply the 1-->2 commit (O-->N patch) to O+ in the WD

	echo
	echo "Inspect result of naive port"
	git status                  # lists files and shows which are in conflict

	# Visualize the current commits
	git logo -4                 # view base commit + m3 seeds
	H=`git logo -1         |cut -b1-4`
	HH=`git logo HEAD^ -1  |cut -b1-4`
	HHH=`git logo HEAD^^ -1 |cut -b1-4`
	echo
	echo "Guide to assist in Code Review based comparisons of naive port"
	echo "      (O      N    )  (O+   WD)   (N     WD)"
	echo "      (HEAD^^ HEAD^)  (HEAD WD)   (HEAD^ WD)"
	echo "      ($HHH   $HH )  ($H WD)   ($HH  WD)"

	echo
	echo -e "${BLE}=== Phase 1 Complete:  complete port manually in WD, then run 'portloop -c' ===${CLE}"
	echo


	## Repeat run in RealRepo of what already done in TestRepo? if so manual work done!
	## Note Phase 2 in TestRepo not needed, only that the N+ FFfiles are in the WD, committed or not.
	if [ "$Repo" == "$RealRepo" ]; then
		NewFF_test="$TestRepo/$NewFF"
		if [[ -e $NewFF_test ]]; then
			read -p "One more thing: $ND already exists in TestRepo, adopt it to replace the naive port [Ny] ? " ans
			if [[ "$ans" == "y" ]]; then
				\rm $NewFF/*					# wipeout existing, but don't tell git!
				cp  $NewFF_test/*  $NewFF/		# adopt N+ from TestRepo
			fi
		fi
	fi


##---------------- Phase 2: close loop, clean up   ----------------------------#
else

	# Check git state is safe
	if [ $currbranch != $loopbranch ]; then
		echo "Branch is $currbranch, needs to be $loopbranch!"
		abort="True"
	fi
	git status | grep Changes > /dev/null
	if [ $? -eq 1 ]; then
		echo "WD is clean! nothing to commit"
		abort="True"
	fi
	git logo -1 |grep 'Seeding stage 3' > /dev/null
	if [ $? -eq 1 ]; then
		read -p "Warning: last commit not 'Seeding stage 3', continue [Yn] ? " ans
		[[ "$ans" == "n" ]] && abort="True"
	fi

	echo
	if [ $abort == "True" ]; then
		echo "*** Something wrong with inputs or state, aborting ***"
		exit
	fi
	echo "================== Testing Done =================="



	echo
	echo -e "${BLU}=========== Committing final port ====================${CLE}"

	echo "Backing up current port in WD $NewFF to parent dir just in case"
	cp -r $NewFF ../${New}_WDbackup
	echo

	# Stage the whole directory, though probably it is already done
	git add $NewFF

	SM="Port of $OS FFcode from $Old to $New."		# Standard Message header
	read -p "Was the port conflict-free and can be committed with a standard message? [Ny] ? " ans
	if [[ "$ans" == "y" ]]; then
		CM="The port was conflict-free."
		git commit  -m"$SM" -m"$CM"
	else
		read -p "Were the conflicts trivial? [Ny] ? " ans
		if [[ "$ans" == "y" ]]; then
			CM="Port had trivial conflicts, with no FF changes required."
			git commit  -m"$SM" -m"$CM"
		else
			CM="The port has conflicts requiring some changes to FFfiles."
			git commit -e -m"$SM" -m"$CM"		# edit this draft
		fi
	fi

	echo
	echo -e "${BLU}=========== Closing Loop -- Merge to master ==========${CLE}"
	# checkout should work even if uncommitted changes (outside NewFF): they won't be merged
	git checkout master
	SM="Merge commit of branch $loopbranch : Port of $OS FFcode from $Old to $New."
	if [[ "$SeedingCURRENT" == "n" ]]; then
		git merge --no-ff  $loopbranch	-m"$SM"	# insist on a MC, even though not necessary
	else
		echo " **!!** Must enter editor to record commit MN1 from CURRENT, since missing from N1 commit above **!!** "
		echo " **!!** Copy output of  git branch -v  from FFport in VM **!!**"
		CM="The new source derived from the following main commit :"
		read -p "Hit return when ready to enter editor... " ans
		git merge -e --no-ff  $loopbranch	-m"$SM"	-m"$CM"		# insist on a MC, even though not necessary
	fi

	echo
	git branch -d $loopbranch
	echo
	git logo -7 --graph			# view base commit + 3 seeds + 1 extra + merge commit
	echo

	echo "=== Portloop Phase 2 Complete ==="
	echo
fi

cd $Repo		# dir pointer is stale
##------------------------------------------------------------------------------




exit
########################################################################




