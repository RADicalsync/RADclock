dnl
dnl Copyright (C) 2006-2012, Julien Ridoux <julien@synclab.org>
dnl All rights reserved.
dnl
dnl Redistribution and use in source and binary forms, with or without
dnl modification, are permitted provided that the following conditions are met:
dnl
dnl 1. Redistributions of source code must retain the above copyright notice,
dnl    this list of conditions and the following disclaimer.
dnl
dnl 2. Redistributions in binary form must reproduce the above copyright notice,
dnl    this list of conditions and the following disclaimer in the documentation
dnl    and/or other materials provided with the distribution.
dnl
dnl THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
dnl AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
dnl IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
dnl ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
dnl LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
dnl CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
dnl SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
dnl INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
dnl CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
dnl ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
dnl POSSIBILITY OF SUCH DAMAGE.


dnl Check for autoconf version
AC_PREREQ(2.57)

dnl include version number autogenerated
m4_include([version.m4])

AC_INIT([radclock],
		[RADCLOCK_VERSION_NUMBER],
		[julien@synclab.org],
		[radclock],
		[http://www.synclab.org/radclock/])

dnl This should set the target_cpu, target_os and target_vendor variables
AC_CANONICAL_TARGET

dnl Init and check for automake version
AM_INIT_AUTOMAKE(1.8)

dnl Init libtool magic
dnl XXX TODO: see if we need to activate this or not
dnl AC_CONFIG_MACRO_DIR([m4])
AC_PROG_LIBTOOL


dnl ===========================================================================
dnl Project internals: define directories with friends to compile
dnl ===========================================================================

AC_CONFIG_SRCDIR([radclock/radclock_main.c])
AC_CONFIG_FILES([Makefile libradclock/Makefile radclock/Makefile
				 examples/Makefile man/Makefile tests/Makefile])

dnl Conditional for the autotools that are not shipped away
if test -e version.sh; then
	AM_CONDITIONAL([MK_UPSTREAM], [test 1 = 1])
else
	AM_CONDITIONAL([MK_UPSTREAM], [test 0 = 1])
fi


AC_CHECK_HEADER([_ffcounter.h],
	[AM_CONDITIONAL([MK__FFCOUNTER_H], [test 1 = 1])],
	[AM_CONDITIONAL([MK__FFCOUNTER_H], [test 1 = 0])])

AM_CONFIG_HEADER(config.h)

LIBRADCLOCK_LIBS="\$(top_builddir)/libradclock/libradclock.la"



dnl ===========================================================================
dnl Extra option to the configure script
dnl ===========================================================================

AC_ARG_WITH([jdebug],
			[AS_HELP_STRING([--with-jdebug],
							[Extra debug output (developper only)])],
			[jdebug=yes],
			[jdebug=no])

if test "$jdebug" = "yes"; then
	AC_DEFINE([WITH_JDEBUG], [1], [Define to 1 if with extra debug output])
fi

dnl Kernel support forced or auto-detect
AC_ARG_WITH([radclock-kernel],
			[AS_HELP_STRING([--with-radclock-kernel],
							[Force compilation of radclock kernel support])],
							[tscexts=yes],
							[tscexts=no])



dnl ===========================================================================
dnl Variables that will be exported in all makefiles
dnl ===========================================================================

AC_SUBST([ADD_INCLS])
AC_SUBST([ADD_LIBS])
AC_SUBST([PACKAGE_NAME])
AC_SUBST([PACKAGE_VERSION])
AC_SUBST([CFLAGS], "${CFLAGS} -Wall -g")




dnl ===========================================================================
dnl Generic tests
dnl ===========================================================================
dnl XXX Do we need all these, do we act on these?
AC_PROG_CC
AC_PROG_INSTALL
AC_C_CONST
AC_C_INLINE
AC_C_BIGENDIAN
AC_TYPE_SIZE_T
AC_SYS_LARGEFILE

AC_PROG_GCC_TRADITIONAL
AC_CHECK_FUNCS([socket strdup strlcpy mkstemps mkstemp])

dnl Check requires types. Error output if not correct.
AC_CHECK_SIZEOF([int])
AC_CHECK_SIZEOF([long long int])

AC_HEADER_TIME
AC_CHECK_HEADERS([ifaddrs.h])




dnl ===========================================================================
dnl rdtsc() detection. Always messy, different for OS detected by autoconf
dnl ===========================================================================
case $target_os in

	freebsd*)
		AC_CHECK_HEADERS([sys/timeffc.h])
		AC_CHECK_HEADERS([sys/types.h])
		AC_CHECK_HEADERS([machine/cpufunc.h],
						 [],
						 [],
						 [#ifdef HAVE_SYS_TYPES_H
						  #include <sys/types.h>
						  #endif])
		AC_CHECK_DECL([rdtsc],
					  [AC_DEFINE([HAVE_RDTSC],
								 [1],
								 [Define to 1 if you have rdtsc()])],
					  [],
					  [#include <sys/types.h>
					   #include <machine/cpufunc.h>
					   ])
		;;

dnl 3 headers to test in Linux, but seems it is not available anymore anyway
	linux*)
		AC_CHECK_HEADER([asm/msr.h])
		if test "$ac_cv_header_asm_msr_h" = "yes"; then
			AC_CHECK_DECL([rdtscll],
						  [AC_DEFINE([HAVE_RDTSCLL_ASM],
									 [1],
									 [Define to 1 if rdtscll() in asm/msr.h])],
						  [],
						  [#include <asm/msr.h>])
		fi

		AC_CHECK_HEADER([asm-x86/msr.h])
		if test "$ac_cv_header_asm_x86_msr_h" = "yes"; then
			AC_CHECK_DECL([rdtscll],
						  [AC_DEFINE([HAVE_RDTSCLL_ASM_X86],
									 [1],
									 [Define to 1 if rdtscll() in asm-x86/msr.h])],
						  [],
						  [#include <asm-x86/msr.h>])
		fi

		AC_CHECK_HEADER([asm-x86_64/msr.h])
		if test "$ac_cv_header_asm_x86_64_msr_h" = "yes"; then
			AC_CHECK_DECL([rdtscll],
						  [AC_DEFINE([HAVE_RDTSCLL_ASM_X86_64],
									 [1],
									 [Define to 1 if rdtscll() in asm-x86_64/msr.h])],
						  [],
						  [#include <asm-x86_64/msr.h>])
		fi
		;;

	*)
		;;
esac





dnl ===========================================================================
dnl Check for correct version of libpcap
dnl ===========================================================================
libpcap_ok=1
AC_CHECK_HEADER([pcap.h], [], [libpcap_ok=0])
AC_CHECK_LIB([pcap], [pcap_next_ex], [], [libpcap_ok=0])
AC_CHECK_LIB([pcap], [pcap_dump_flush], [], [libpcap_ok=0])

dnl check if we have libpcap version >= 1.0.0.
dnl It is essential for Linux MMAP support
dnl pcap_activate does not exist in previous versions
dnl need AC_CHECK_LIB beforehand
AC_CHECK_FUNCS(pcap_activate)



dnl ===========================================================================
dnl Check for librt and POSIX timers
dnl ===========================================================================
librt_ok=1
AC_CHECK_LIB([rt],
			 [clock_gettime],
			 [AM_CONDITIONAL([MK_LIBRT], [test 1 = 1])
			  AC_DEFINE([HAVE_CLOCK_GETTIME],
						 [1],
						 [Define if clock_gettime is available (rt library)])],
			 [AM_CONDITIONAL([MK_LIBRT], [test 1 = 0])] [librt_ok=0])

AC_CHECK_LIB([rt],
			 [timer_create],
			 AC_DEFINE([HAVE_POSIX_TIMER],
						 [1],
						 [Define if POSIX timer available (rt library)]),
			[])

AC_CHECK_LIB([rt], [sched_setscheduler], [], [librt_ok=0])



dnl ===========================================================================
dnl pps api ? Freebsd only so far
dnl ===========================================================================
AC_CHECK_HEADER([sys/timepps.h],
				[AM_CONDITIONAL([MK_PPSAPI], [test 1 = 1])],
				[AM_CONDITIONAL([MK_PPSAPI], [test 0 = 1])])


dnl ===========================================================================
dnl Xen??
dnl ===========================================================================
AC_CHECK_LIB([xenstore],
			 [xs_domain_open],
			 [AM_CONDITIONAL([MK_XEN], [test 1 = 1])
			  AC_DEFINE([WITH_XENSTORE],
						[1],
						[Define to 1 if compiling with xenstore])],
			 [AM_CONDITIONAL([MK_XEN], [test 0 = 1])])




dnl ===========================================================================
dnl OS version, RADclock patched? and version
dnl ===========================================================================
ffsupportversion=none
if test "$tscexts" = "no"; then
case "$target_os" in
	linux*)
		osversion=$(uname -r | sed -e 's/\([0-9]*.[0-9]*.[0-9]*\)-.*/\1/')
		if test -e /sys/devices/system/ffclock/ffclock0/version; then
			tscexts=yes
			ffsupportversion=`cat /sys/devices/system/ffclock/ffclock0/version`
		else
			if test -e  /proc/sys/net/core/radclock_default_tsmode ; then
				tscexts=yes
				ffsupportversion=0
			fi
		fi
		;;

	freebsd*)
		osversion=$(uname -r | sed -e 's/\([0-9]*.[0-9]*\)-.*/\1/')

		# Version 2 and 3
		ffsupportversion=`sysctl -n kern.sysclock.ffclock.version`
		if test $ffsupportversion ; then
			tscexts=yes
		else
			# Version 1
			ffsupportversion=`sysctl -n kern.ffclock.version`
			if test $ffsupportversion ; then
				tscexts=yes
			else
				ext=`sysctl -n net.bpf.bpf_radclock_tsmode`
				if test $ext ; then
					tscexts=yes
					ffsupportversion=0
				fi
			fi
		fi
		;;
esac
fi

AM_CONDITIONAL([MK_FFKERNEL], [test "x$tscexts" = "xyes"])




dnl ===========================================================================
dnl Detect kernel channel
dnl ===========================================================================
AM_CONDITIONAL([MK_FFKERNEL_NONE], [test 1 = 0])
AM_CONDITIONAL([MK_FFKERNEL_LINUX], [test 1 = 0])
AM_CONDITIONAL([MK_FFKERNEL_FBSD], [test 1 = 0])
case $target_os in

	linux*)
		netlink=yes

		AC_CHECK_HEADERS([linux/netlink.h],
						 [],
						 [netlink=no],
						 [#include <sys/socket.h>])
		AC_CHECK_HEADERS([netlink/netlink.h],
						 [],
						 [netlink=no],
						 [#include <sys/socket.h>])
		AC_CHECK_HEADERS([linux/genetlink.h],
						 [],
						 [netlink=no],
						 [#include <sys/socket.h>])
		AC_CHECK_LIB([nl], [nl_handle_alloc], [], netlink=no)
		AC_MSG_CHECKING([nl_recv for four or three params])
		AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/socket.h>
											 #include <linux/netlink.h>
											 #include <netlink/netlink.h>]],
										   [[nl_recv(NULL,NULL,NULL,NULL);]])],
						  [nl_recv=four],
						  [nl_recv=unknown])
		if test "${nl_recv}" = "four"; then
			AC_DEFINE([WITH_NL_RECV_FOUR_PARM], [], [nl_recv takes 4 params])
			AC_MSG_RESULT([four])
		else
			AC_MSG_RESULT([three])
		fi

		if test "${netlink}" = "no"; then
			AC_DEFINE([WITH_FFKERNEL_NONE],
					  [1],
					  [Define to 1 if NOT detected patched radclock kernel])
			AM_CONDITIONAL([MK_FFKERNEL_NONE], [test 1 = 1])
		else
			if test "$tscexts" = "yes"; then
				LIBRADCLOCK_LIBS="${LIBRADCLOCK_LIBS} -lnl"
				AC_DEFINE([WITH_FFKERNEL_LINUX],
						  [1],
						  [Define to 1 if detected patched radclock kernel])
				AM_CONDITIONAL([MK_FFKERNEL_LINUX], [test 1 = 1])
			else
				AC_DEFINE([WITH_FFKERNEL_NONE],
						  [1],
						  [Define to 1 if NOT detected patched radclock kernel])
				AM_CONDITIONAL([MK_FFKERNEL_NONE], [test 1 = 1])
			fi
		fi
		;;


	freebsd*)

		if test "$tscexts" = yes; then
			AC_DEFINE([WITH_FFKERNEL_FBSD],
					  [1],
					  [Define to 1 if detected patched radclock kernel])
			AM_CONDITIONAL([MK_FFKERNEL_FBSD], [test 1 = 1])
		else
			AC_DEFINE([WITH_FFKERNEL_NONE],
					  [1],
					  [Define to 1 if NOT detected patched radclock kernel])
			AM_CONDITIONAL([MK_FFKERNEL_NONE], [test 1 = 1])
		fi
		;;

dnl	 Darwin* and other OS without kernel extensions
dnl	darwin*|unknown*)
	*)
		AC_DEFINE([WITH_FFKERNEL_NONE],
				  [1],
				  [Define to 1 if NOT detected patched radclock kernel])
		AM_CONDITIONAL([MK_FFKERNEL_NONE], [test 1 = 1])
		;;
esac


AC_SUBST([LIBRADCLOCK_LIBS])




	dnl ===========================================================================
	dnl Initialise IOCTLs
	dnl ===========================================================================

ioctlcount=0
syscall_get_vcounter_number=0
syscall_get_vcounter_latency_number=0

if test "$tscexts" = "yes"; then
case "$target_os" in
	freebsd*)
		case "$osversion" in
			# Sysctl for 6.x kernels
			6*)
				ioctlcount=124
				;;
			# Sysctl for 7.x kernels
			7*)
				ioctlcount=125
				;;
			# Sysctl for 8.x kernels
			8*)
				ioctlcount=131
				;;
			# Sysctl for 9.x kernels
## XXX TODO this should disappear with kernel version > 1 once
## we get read of IOCTL
			9*)
				ioctlcount=133
				;;
			*)
				ioctlcount=0
				;;
		esac
		AC_DEFINE_UNQUOTED([FREEBSD_RADCLOCK_IOCTL],
						   [$ioctlcount],
						   [Define the first radclock specific ioctl number
							(freebsd specific)])
		;;
	
	linux*)
		case "$osversion" in
			2.6.26*)

				# Set the SYSCALL numbers
				case "$target_cpu" in
					i386 | i486 | i586 | i686)
						syscall_get_vcounter_number=327
						syscall_get_vcounter_latency_number=328
					;;
					x86_64)
						syscall_get_vcounter_number=288
						syscall_get_vcounter_latency_number=289
					;;
				esac
			;;	
			2.6.27*)
				# Set the SYSCALL numbers
				case "$target_cpu" in
					i386 | i486 | i586 | i686)
						syscall_get_vcounter_number=333
						syscall_get_vcounter_latency_number=334
					;;
					x86_64)
						syscall_get_vcounter_number=295
						syscall_get_vcounter_latency_number=296
					;;
				esac
			;;	
			2.6.28*)
				# Set the SYSCALL numbers
				case "$target_cpu" in
					i386 | i486 | i586 | i686)
						syscall_get_vcounter_number=333
						syscall_get_vcounter_latency_number=334
					;;
					x86_64)
						syscall_get_vcounter_number=295
						syscall_get_vcounter_latency_number=296
					;;
				esac
			;;	
			2.6.29*)
				# Set the SYSCALL numbers
				case "$target_cpu" in
					i386 | i486 | i586 | i686)
						syscall_get_vcounter_number=333
						syscall_get_vcounter_latency_number=334
					;;
					x86_64)
						syscall_get_vcounter_number=295
						syscall_get_vcounter_latency_number=296
					;;
				esac
			;;	
			2.6.30*)
				# Set the SYSCALL numbers
				case "$target_cpu" in
					i386 | i486 | i586 | i686)
						syscall_get_vcounter_number=335
						syscall_get_vcounter_latency_number=336
					;;
					x86_64)
						syscall_get_vcounter_number=297
						syscall_get_vcounter_latency_number=298
					;;
				esac
			;;	
			2.6.31*)
				# Set the SYSCALL numbers
				case "$target_cpu" in
					i386 | i486 | i586 | i686)
						syscall_get_vcounter_number=337
						syscall_get_vcounter_latency_number=338
					;;
					x86_64)
						syscall_get_vcounter_number=299
						syscall_get_vcounter_latency_number=300
					;;
				esac
			;;	
			2.6.32*)
				# Set the SYSCALL numbers
				case "$target_cpu" in
					i386 | i486 | i586 | i686)
						syscall_get_vcounter_number=337
						syscall_get_vcounter_latency_number=338
					;;
					x86_64)
						syscall_get_vcounter_number=299
						syscall_get_vcounter_latency_number=300
					;;
				esac
			;;	
			3.2.2*)
				# Set the SYSCALL numbers
				case "$target_cpu" in
					i386 | i486 | i586 | i686)
						syscall_get_vcounter_number=349
						syscall_get_vcounter_latency_number=350
					;;
					x86_64)
						syscall_get_vcounter_number=312
						syscall_get_vcounter_latency_number=313
					;;
				esac
			;;	
			*)
				syscall_get_vcounter_number=0
				syscall_get_vcounter_latency_number=0
			;;
		esac
		AC_DEFINE_UNQUOTED([LINUX_SYSCALL_GET_VCOUNTER],
						   [$syscall_get_vcounter_number],
						   [Define get_vcounter_syscall number (Linux specific)])
		AC_DEFINE_UNQUOTED([LINUX_SYSCALL_GET_VCOUNTER_LATENCY],
						   [$syscall_get_vcounter_latency_number],
						   [Define get_vcounter_latency_syscall number
							(Linux specific)])
		;;
esac
fi







dnl ===========================================================================
dnl Summary of all we have done so far
dnl ===========================================================================

AC_OUTPUT

AC_MSG_NOTICE([----------------------------------------])
AC_MSG_NOTICE([RADClock version $PACKAGE_VERSION])
AC_MSG_NOTICE([Found target arch: $target_cpu])
AC_MSG_NOTICE([Compiling for $target_os])
AC_MSG_NOTICE([Feed-forward kernel: $tscexts (version: $ffsupportversion)])

case $target_os in
	
	linux*)
	if test "$tscexts" = yes
	then
		AC_MSG_NOTICE([get_counter syscall number: $syscall_get_vcounter_number])
		AC_MSG_NOTICE([get_counter_latency syscall number:
					   $syscall_get_vcounter_latency_number])
		if test "$netlink" = no
		then
		AC_MSG_NOTICE([**ERROR** - Netlink library (libnl) not found])
		fi
	fi
	;;

	freebsd*)
	if test "$tscexts" = yes
	then
		AC_MSG_NOTICE([ioctl Count Starting At $ioctlcount])
	fi
	;;

	*)
	;;
esac




if test $libpcap_ok -lt 1
then
	AC_MSG_NOTICE([**ERROR** - Libpcap not found or version too old])
	AC_MSG_NOTICE([**ERROR** - Require libpcap 0.8 or higher)])
	AC_MSG_NOTICE([**ERROR** - You can not install RADclock)])
fi
if test $ac_cv_sizeof_int -lt 4;
then
	AC_MSG_NOTICE([**ERROR** - Size of int is $ac_cv_sizeof_int bytes.])
	AC_MSG_NOTICE([**ERROR** - You can not install RADclock)])
fi

if test $ac_cv_sizeof_long_long_int -lt 8;
then
	lli = $ac_cv_sizeof_long_long_int
	AC_MSG_NOTICE([**ERROR** - Size of long long int is $lli bytes.])
	AC_MSG_NOTICE([**ERROR** - You can not install RADclock)])
fi
AC_MSG_NOTICE([----------------------------------------])

