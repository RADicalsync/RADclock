---
 sys/kern/radclock.c           |  175 ++++++++++++++++++++++++++++++++++++++++++
 sys/modules/Makefile          |    1 
 sys/modules/radclock/Makefile |   16 +++
 sys/sys/time.h                |    5 +
 4 files changed, 197 insertions(+)

Index: 7.4.0/sys/kern/radclock.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ 7.4.0/sys/kern/radclock.c	2012-04-18 00:13:32.000000000 +1000
@@ -0,0 +1,175 @@
+/*
+ * System calls to access the cumulative virtual timecounter
+ */
+
+#include <sys/types.h>
+#include <sys/param.h>
+#include <sys/proc.h>
+#include <sys/module.h>
+#include <sys/sysent.h>
+#include <sys/kernel.h>
+#include <sys/systm.h>
+#include <sys/time.h>
+#include <sys/sysproto.h>
+#include <sys/bus.h>
+#include <sys/sysctl.h>
+
+
+/*
+ * Sysctl
+ */
+static int sysctl_version = 1;
+
+SYSCTL_NODE(_kern, OID_AUTO, ffclock, CTLFLAG_RW, 0,
+		"Feed-Forward Clock Support");
+SYSCTL_INT(_kern_ffclock, OID_AUTO, version, CTLFLAG_RD, &sysctl_version, 0,
+		"Version of Feed-Forward Clock Support");
+
+/*
+ * First system call is get_vcounter to retrieve the current value
+ * of the cumulative vritual counter from the timecounter interface
+ */
+
+struct get_vcounter_args {
+	vcounter_t *vcount;
+};
+
+static int
+get_vcounter(struct proc *td, void *syscall_args)
+{
+	vcounter_t vcount = 0;
+	int error = 0;
+	struct get_vcounter_args *uap;
+
+	uap = (struct get_vcounter_args *) syscall_args;
+	if ( uap->vcount == NULL )
+		return -1;
+
+	vcount = read_vcounter();
+	error = copyout(&vcount, uap->vcount, sizeof(vcounter_t));
+
+	if ( vcount == 0 )
+		error = -1;
+
+	return(error);
+}
+
+
+static struct sysent get_vcounter_sysent = {
+	1,
+	(sy_call_t *) get_vcounter,
+	AUE_NULL,
+	NULL,
+	0,
+	0
+};
+
+
+static int get_vcounter_offset = NO_SYSCALL;
+
+static int
+get_vcounter_load (struct module *module, int cmd, void *arg)
+{
+	int error = 0;
+	switch (cmd) {
+		case MOD_LOAD :
+			printf("get_vcounter syscall loaded at %d \n", get_vcounter_offset);
+		break;
+		case MOD_UNLOAD :
+			printf("get_vcounter syscall unloaded from %d\n", get_vcounter_offset);
+		break;
+		default :
+			error = EINVAL;
+		break;
+	}
+	return error;
+}
+
+SYSCALL_MODULE(get_vcounter, &get_vcounter_offset, &get_vcounter_sysent,
+		get_vcounter_load, NULL);
+
+
+
+/*
+ * Second system call is get_vcounter_latency to compute the latency of
+ * the timecounter interface from within the kernel
+ *
+ * XXX: of course this makes sense ONLY if we have a stable TSC
+ * (i.e. no SMP, no power management, no frequency jumps etc.)
+ */
+
+struct get_vcounter_latency_args {
+	vcounter_t *vcount;
+	uint64_t *vcount_lat;
+	uint64_t *tsc_lat;
+};
+
+static int
+get_vcounter_latency(struct proc *td, void *syscall_args)
+{
+	uint64_t tsc1 = 0, tsc2 = 0, tsc3 = 0, vcount_lat = 0, tsc_lat = 0;
+	vcounter_t vcount;
+	int error = 0;
+	struct get_vcounter_latency_args *uap;
+
+	uap = (struct get_vcounter_latency_args *) syscall_args;
+
+	/* One for fun and warmup */
+	tsc1 = rdtsc();
+	__asm __volatile("lfence" ::: "memory");
+	tsc1 = rdtsc();
+	__asm __volatile("lfence" ::: "memory");
+	tsc2 = rdtsc();
+	__asm __volatile("lfence" ::: "memory");
+	vcount = read_vcounter();
+	__asm __volatile("lfence" ::: "memory");
+	tsc3 = rdtsc();
+	__asm __volatile("lfence" ::: "memory");
+
+	tsc_lat = tsc2 - tsc1;
+	vcount_lat = tsc3 - tsc2;
+
+	error += copyout(&vcount, uap->vcount, sizeof(vcounter_t));
+	error += copyout(&vcount_lat, uap->vcount_lat, sizeof(uint64_t));
+	error += copyout(&tsc_lat, uap->tsc_lat, sizeof(uint64_t));
+
+	return(error);
+}
+
+
+static struct sysent get_vcounter_latency_sysent = {
+	3,
+	(sy_call_t *) get_vcounter_latency,
+	AUE_NULL,
+	NULL,
+	0,
+	0
+};
+
+
+static int get_vcounter_latency_offset = NO_SYSCALL;
+
+static int
+get_vcounter_latency_load (struct module *module, int cmd, void *arg)
+{
+	int error = 0;
+	switch (cmd) {
+		case MOD_LOAD :
+			printf("get_vcounter_latency syscall loaded at %d \n",
+					get_vcounter_latency_offset);
+		break;
+		case MOD_UNLOAD :
+			printf("get_vcounter_latency syscall unloaded from %d\n",
+					get_vcounter_latency_offset);
+		break;
+		default :
+			error = EINVAL;
+		break;
+	}
+	return error;
+}
+
+SYSCALL_MODULE(get_vcounter_latency, &get_vcounter_latency_offset,
+		&get_vcounter_latency_sysent, get_vcounter_latency_load, NULL);
+
+
Index: 7.4.0/sys/modules/Makefile
===================================================================
--- 7.4.0.orig/sys/modules/Makefile	2012-04-11 23:56:28.000000000 +1000
+++ 7.4.0/sys/modules/Makefile	2012-04-18 00:12:02.000000000 +1000
@@ -225,20 +225,21 @@ SUBDIR=	${_3dfx} \
 	${_pmc} \
 	portalfs \
 	ppbus \
 	ppc \
 	ppi \
 	pps \
 	procfs \
 	pseudofs \
 	${_pst} \
 	puc \
+	radclock \
 	ral \
 	${_random} \
 	${_ray} \
 	rc \
 	rc4 \
 	${_rdma} \
 	re \
 	reiserfs \
 	rl \
 	rp \
Index: 7.4.0/sys/modules/radclock/Makefile
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ 7.4.0/sys/modules/radclock/Makefile	2012-04-18 00:18:29.000000000 +1000
@@ -0,0 +1,16 @@
+# This make file creates the .ko module for retrieving the vitual counter
+# through syscall.
+
+.PATH: ${.CURDIR}/../../kern
+
+KMOD    =  radclock
+SRCS    =  radclock.c
+
+SRCS+=	opt_radclock.h
+
+.if !defined(KERNBUILDDIR)
+opt_radclock.h:
+	echo "#define RADCLOCK 1" > opt_radclock.h
+.endif
+
+.include <bsd.kmod.mk>
Index: 7.4.0/sys/sys/time.h
===================================================================
--- 7.4.0.orig/sys/sys/time.h	2012-04-11 23:56:28.000000000 +1000
+++ 7.4.0/sys/sys/time.h	2012-04-18 00:12:02.000000000 +1000
@@ -290,20 +290,25 @@ void	nanotime(struct timespec *tsp);
 void	microtime(struct timeval *tvp);
 
 void	getbinuptime(struct bintime *bt);
 void	getnanouptime(struct timespec *tsp);
 void	getmicrouptime(struct timeval *tvp);
 
 void	getbintime(struct bintime *bt);
 void	getnanotime(struct timespec *tsp);
 void	getmicrotime(struct timeval *tvp);
 
+/* RADCLOCK specific */
+typedef uint64_t vcounter_t;
+vcounter_t read_vcounter(void);
+/* RADCLOCK */
+
 /* Other functions */
 int	itimerdecr(struct itimerval *itp, int usec);
 int	itimerfix(struct timeval *tv);
 int	ppsratecheck(struct timeval *, int *, int);
 int	ratecheck(struct timeval *, const struct timeval *);
 void	timevaladd(struct timeval *t1, const struct timeval *t2);
 void	timevalsub(struct timeval *t1, const struct timeval *t2);
 int	tvtohz(struct timeval *tv);
 #else /* !_KERNEL */
 #include <time.h>
