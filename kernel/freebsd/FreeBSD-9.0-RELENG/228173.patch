------------------------------------------------------------------------
r228173 | lstewart | 2011-12-01 18:19:13 +1100 (Thu, 01 Dec 2011) | 19 lines

Revise the sysctl handling code and restructure the hierarchy of sysctls
introduced when feed-forward clock support is enabled in the kernel:

- Rename the "choice" variable to "available".

- Streamline the implementation of the "active" variable's sysctl handler
  function.

- Create a kern.sysclock sysctl node for general sysclock related configuration
  options. Place the "available" and "active" variables under this node.

- Create a kern.sysclock.ffclock sysctl node for feed-forward clock specific
  configuration options. Place the "version" and "ffcounter_bypass" variables
  under this node.

- Tweak some of the description strings.

Discussed with:	Julien Ridoux (jridoux at unimelb edu au)

------------------------------------------------------------------------
---
 sys/kern/kern_ffclock.c |   96 +++++++++++++++++++++++++-----------------------
 sys/sys/timeffc.h       |    6 +++
 2 files changed, 57 insertions(+), 45 deletions(-)

Index: 9.0/sys/kern/kern_ffclock.c
===================================================================
--- 9.0.orig/sys/kern/kern_ffclock.c	2012-03-15 02:24:02.000000000 +1100
+++ 9.0/sys/kern/kern_ffclock.c	2012-03-15 02:24:03.000000000 +1100
@@ -141,100 +141,106 @@ ffclock_difftime(ffcounter ffdelta, stru
 			err_rate = ffclock_estimate.errb_rate;
 		} while (update_ffcount != ffclock_estimate.update_ffcount);
 
 		ffclock_convert_diff(ffdelta, error_bound);
 		/* 18446744073709 = int(2^64/1e12), err_bound_rate in [ps/s] */
 		bintime_mul(error_bound, err_rate * (uint64_t)18446744073709LL);
 	}
 }
 
 /*
- * Sysctl for the Feed-Forward Clock.
+ * Create a new kern.sysclock sysctl node, which will be home to some generic
+ * sysclock configuration variables. Feed-forward clock specific variables will
+ * live under the ffclock subnode.
  */
 
-static int ffclock_version = 2;
-SYSCTL_NODE(_kern, OID_AUTO, ffclock, CTLFLAG_RW, 0,
-    "Feed-Forward Clock Support");
-SYSCTL_INT(_kern_ffclock, OID_AUTO, version, CTLFLAG_RD, &ffclock_version, 0,
-    "Version of Feed-Forward Clock Support");
-
-/*
- * Sysctl to select which clock is read when calling any of the
- * [get]{bin,nano,micro}[up]time() functions.
- */
-char *sysclocks[] = {"feedback", "feed-forward"};
+SYSCTL_NODE(_kern, OID_AUTO, sysclock, CTLFLAG_RW, 0,
+    "System clock related configuration");
+SYSCTL_NODE(_kern_sysclock, OID_AUTO, ffclock, CTLFLAG_RW, 0,
+    "Feed-forward clock configuration");
 
+static char *sysclocks[] = {"feedback", "feed-forward"};
+#define	MAX_SYSCLOCK_NAME_LEN 16
 #define	NUM_SYSCLOCKS (sizeof(sysclocks) / sizeof(*sysclocks))
 
-/* Report or change the active timecounter hardware. */
+static int ffclock_version = 2;
+SYSCTL_INT(_kern_sysclock_ffclock, OID_AUTO, version, CTLFLAG_RD,
+    &ffclock_version, 0, "Feed-forward clock kernel version");
+
+/* List available sysclocks. */
 static int
-sysctl_kern_ffclock_choice(SYSCTL_HANDLER_ARGS)
+sysctl_kern_sysclock_available(SYSCTL_HANDLER_ARGS)
 {
 	struct sbuf *s;
 	int clk, error;
 
-	s = sbuf_new_for_sysctl(NULL, NULL, 16 * NUM_SYSCLOCKS, req);
+	s = sbuf_new_for_sysctl(NULL, NULL,
+	    MAX_SYSCLOCK_NAME_LEN * NUM_SYSCLOCKS, req);
 	if (s == NULL)
 		return (ENOMEM);
 
 	for (clk = 0; clk < NUM_SYSCLOCKS; clk++) {
 		sbuf_cat(s, sysclocks[clk]);
 		if (clk + 1 < NUM_SYSCLOCKS)
 			sbuf_cat(s, " ");
 	}
 	error = sbuf_finish(s);
 	sbuf_delete(s);
 
 	return (error);
 }
 
-SYSCTL_PROC(_kern_ffclock, OID_AUTO, choice, CTLTYPE_STRING | CTLFLAG_RD,
-    0, 0, sysctl_kern_ffclock_choice, "A", "Clock paradigms available");
+SYSCTL_PROC(_kern_sysclock, OID_AUTO, available, CTLTYPE_STRING | CTLFLAG_RD,
+    0, 0, sysctl_kern_sysclock_available, "A",
+    "List of available system clocks");
 
+/*
+ * Return the name of the active system clock if read, or attempt to change
+ * the active system clock to the user specified one if written to. The active
+ * system clock is read when calling any of the [get]{bin,nano,micro}[up]time()
+ * functions.
+ */
 static int
-sysctl_kern_ffclock_active(SYSCTL_HANDLER_ARGS)
+sysctl_kern_sysclock_active(SYSCTL_HANDLER_ARGS)
 {
-	char newclock[32];
-	int error;
+	char newclock[MAX_SYSCLOCK_NAME_LEN];
+	int clk, error;
 
-	switch (sysclock_active) {
-	case SYSCLOCK_FBCK:
-		strlcpy(newclock, sysclocks[SYSCLOCK_FBCK], sizeof(newclock));
-		break;
-	case SYSCLOCK_FFWD:
-		strlcpy(newclock, sysclocks[SYSCLOCK_FFWD], sizeof(newclock));
-		break;
+	if (req->newptr == NULL) {
+		/* Return the name of the current active sysclock. */
+		strlcpy(newclock, sysclocks[sysclock_active], sizeof(newclock));
+		error = sysctl_handle_string(oidp, newclock,
+		    sizeof(newclock), req);
+	} else {
+		/* Change the active sysclock to the user specified one. */
+		error = EINVAL;
+		for (clk = 0; clk < NUM_SYSCLOCKS; clk++) {
+			if (strncmp((char *)req->newptr, sysclocks[clk],
+			    strlen(sysclocks[clk])) == 0) {
+				sysclock_active = clk;
+				error = 0;
+				break;
+			}
+		}
 	}
 
-	error = sysctl_handle_string(oidp, &newclock[0], sizeof(newclock), req);
-	if (error != 0 || req->newptr == NULL)
-		return (error);
-	if (strncmp(newclock, sysclocks[SYSCLOCK_FBCK],
-	    sizeof(sysclocks[SYSCLOCK_FBCK])) == 0)
-		sysclock_active = SYSCLOCK_FBCK;
-	else if (strncmp(newclock, sysclocks[SYSCLOCK_FFWD],
-	    sizeof(sysclocks[SYSCLOCK_FFWD])) == 0)
-		sysclock_active = SYSCLOCK_FFWD;
-	else
-		return (EINVAL);
-
 	return (error);
 }
 
-SYSCTL_PROC(_kern_ffclock, OID_AUTO, active, CTLTYPE_STRING | CTLFLAG_RW,
-    0, 0, sysctl_kern_ffclock_active, "A", "Kernel clock selected");
-
-int sysctl_kern_ffclock_ffcounter_bypass = 0;
+SYSCTL_PROC(_kern_sysclock, OID_AUTO, active, CTLTYPE_STRING | CTLFLAG_RW,
+    0, 0, sysctl_kern_sysclock_active, "A",
+    "Name of the active system clock which is currently serving time");
 
-SYSCTL_INT(_kern_ffclock, OID_AUTO, ffcounter_bypass, CTLFLAG_RW,
+static int sysctl_kern_ffclock_ffcounter_bypass = 0;
+SYSCTL_INT(_kern_sysclock_ffclock, OID_AUTO, ffcounter_bypass, CTLFLAG_RW,
     &sysctl_kern_ffclock_ffcounter_bypass, 0,
-    "Use reliable hardware timecounter as the Feed-Forward Counter");
+    "Use reliable hardware timecounter as the feed-forward counter");
 
 /*
  * High level functions to access the Feed-Forward Clock.
  */
 void
 ffclock_bintime(struct bintime *bt)
 {
 
 	ffclock_abstime(NULL, bt, NULL, FFCLOCK_LERP | FFCLOCK_LEAPSEC);
 }
Index: 9.0/sys/sys/timeffc.h
===================================================================
--- 9.0.orig/sys/sys/timeffc.h	2012-03-15 02:24:02.000000000 +1100
+++ 9.0/sys/sys/timeffc.h	2012-03-15 02:24:03.000000000 +1100
@@ -48,20 +48,26 @@ struct ffclock_estimate {
 	uint32_t	errb_abs;	/* Bound on absolute clock error [ns]. */
 	uint32_t	errb_rate;	/* Bound on counter rate error [ps/s]. */
 	uint32_t	status;		/* Clock status. */
 	int16_t		leapsec_total;	/* All leap seconds seen so far. */
 	int8_t		leapsec;	/* Next leap second (in {-1,0,1}). */
 };
 
 #if __BSD_VISIBLE
 #ifdef _KERNEL
 
+/* Define the kern.sysclock sysctl tree. */
+SYSCTL_DECL(_kern_sysclock);
+
+/* Define the kern.sysclock.ffclock sysctl tree. */
+SYSCTL_DECL(_kern_sysclock_ffclock);
+
 /*
  * Index into the sysclocks array for obtaining the ASCII name of a particular
  * sysclock.
  */
 #define	SYSCLOCK_FBCK	0
 #define	SYSCLOCK_FFWD	1
 extern int sysclock_active;
 
 /*
  * Parameters of counter characterisation required by feed-forward algorithms.
