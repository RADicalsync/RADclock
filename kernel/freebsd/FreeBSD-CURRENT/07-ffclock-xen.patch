Feed-forward clock support for Xen.

Allow clock dependent mode of operation and a universal ffcounter to ensure all
guests see the same time and allow live migration.

---
 sys/i386/xen/clock.c |   34 ++++++++++++++++++++++++++++++++++
 sys/kern/kern_tc.c   |   42 ++++++++++++++++++++++++++++++++++--------
 sys/sys/timetc.h     |   14 ++++++++++++++
 sys/x86/x86/tsc.c    |   27 +++++++++++++++++++++++++++
 4 files changed, 109 insertions(+), 8 deletions(-)

Index: head/sys/i386/xen/clock.c
===================================================================
--- head.orig/sys/i386/xen/clock.c	2011-11-01 15:03:05.000000000 +1100
+++ head/sys/i386/xen/clock.c	2011-11-01 15:56:44.000000000 +1100
@@ -1,17 +1,21 @@
 /*-
  * Copyright (C) 1990 The Regents of the University of California.
+ * Copyright (C) 2011 The FreeBSD Foundation.
  * All rights reserved.
  *
  * This code is derived from software contributed to Berkeley by
  * William Jolitz and Don Ahn.
  *
+ * Portions of this software were developed by Julien Ridoux at the University
+ * of Melbourne under sponsorship from the FreeBSD Foundation.
+ *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
  *    notice, this list of conditions and the following disclaimer.
  * 2. Redistributions in binary form must reproduce the above copyright
  *    notice, this list of conditions and the following disclaimer in the
  *    documentation and/or other materials provided with the distribution.
  * 3. All advertising materials mentioning features or use of this software
  *    must display the following acknowledgement:
@@ -39,20 +43,21 @@
 #include <sys/cdefs.h>
 __FBSDID("$FreeBSD$");
 
 /* #define DELAYDEBUG */
 /*
  * Routines to handle clock hardware.
  */
 
 #include "opt_ddb.h"
 #include "opt_clock.h"
+#include "opt_ffclock.h"
 
 #include <sys/param.h>
 #include <sys/systm.h>
 #include <sys/bus.h>
 #include <sys/clock.h>
 #include <sys/lock.h>
 #include <sys/mutex.h>
 #include <sys/proc.h>
 #include <sys/time.h>
 #include <sys/timeet.h>
@@ -286,28 +291,42 @@ static inline int time_values_up_to_date
 
 	src = &HYPERVISOR_shared_info->vcpu_info[cpu].time; 
 	dst = &per_cpu(shadow_time, cpu); 
 
 	rmb();
 	return (dst->version == src->version);
 }
 
 static	unsigned xen_get_timecount(struct timecounter *tc);
 
+#ifdef FFCLOCK
+static uint64_t xen_get_timecount_64(struct timecounter *tc);
+
+static struct timecounter xen_timecounter = {
+	.tc_get_timecount = xen_get_timecount,
+	.tc_poll_pps = 0,
+	.tc_counter_mask = ~0u,
+	.tc_frequency = 0,
+	.tc_name = "ixen",
+	.tc_quality = 0,
+	.tc_get_timecount_64 = &xen_get_timecount_64
+};
+#else
 static struct timecounter xen_timecounter = {
 	xen_get_timecount,	/* get_timecount */
 	0,			/* no poll_pps */
 	~0u,			/* counter_mask */
 	0,			/* frequency */
 	"ixen",			/* name */
 	0			/* quality */
 };
+#endif
 
 static struct eventtimer xen_et;
 
 struct xen_et_state {
 	int		mode;
 #define	MODE_STOP	0
 #define	MODE_PERIODIC	1
 #define	MODE_ONESHOT	2
 	int64_t		period;
 	int64_t		next;
@@ -870,20 +889,35 @@ xen_get_timecount(struct timecounter *tc
 	shadow = &per_cpu(shadow_time, smp_processor_id());
 
 	__get_time_values_from_xen();
 	
         clk = shadow->system_timestamp + get_nsec_offset(shadow);
 
 	return (uint32_t)(clk >> 9);
 
 }
 
+#ifdef FFCLOCK
+static uint64_t
+xen_get_timecount_64(struct timecounter *tc)
+{
+	uint64_t clk;
+	struct shadow_time_info *shadow;
+
+	shadow = &per_cpu(shadow_time, smp_processor_id());
+	__get_time_values_from_xen();
+	clk = shadow->system_timestamp + get_nsec_offset(shadow);
+
+	return (clk);
+}
+#endif
+
 /* Return system time offset by ticks */
 uint64_t
 get_system_time(int ticks)
 {
     return processed_system_time + (ticks * NS_PER_TICK);
 }
 
 void
 idle_block(void)
 {
Index: head/sys/kern/kern_tc.c
===================================================================
--- head.orig/sys/kern/kern_tc.c	2011-11-01 15:56:30.000000000 +1100
+++ head/sys/kern/kern_tc.c	2011-11-01 16:01:31.000000000 +1100
@@ -455,20 +455,21 @@ getmicrotime(struct timeval *tvp)
 
 #ifdef FFCLOCK
 /*
  * Support for feed-forward synchronization algorithms. This is heavily inspired
  * by the timehands mechanism but kept independent from it. *_windup() functions
  * have some connection to avoid accessing the timecounter hardware more than
  * necessary.
  */
 
 int sysclock_active = SYSCLOCK_FBCK;
+extern int sysctl_kern_ffclock_ffcounter_bypass;
 
 /* Feed-forward clock estimates kept updated by the synchronization daemon. */
 struct ffclock_estimate ffclock_estimate;
 struct bintime ffclock_boottime;	/* Feed-forward boot time estimate. */
 uint32_t ffclock_status;	/* Feed-forward clock status. */
 int8_t ffclock_updated;		/* Signals new estimates are available. */
 struct mtx ffclock_mtx;		/* Mutex on ffclock_estimate. */
 
 struct sysclock_ops {
 	int active;
@@ -921,35 +922,51 @@ ffclock_convert_diff(ffcounter ffdelta, 
 }
 
 /*
  * Access to current ffcounter value
  */
 void
 ffclock_read_counter(ffcounter *ffcount)
 {
 	struct timehands *th;
 	struct fftimehands *ffth;
+	struct timecounter *tc;
 	unsigned int gen, delta;
 
+	if (sysctl_kern_ffclock_ffcounter_bypass) {
+		tc = timehands->th_counter;
+		*ffcount = tc->tc_get_timecount_64(tc);
+	}
+
 	/*
 	 * ffclock_windup() called from tc_windup(), safe to rely on
 	 * th->th_generation only, for correct delta and ffcounter.
 	 */
-	do {
-		th = timehands;
-		gen = th->th_generation;
-		ffth = fftimehands;
-		delta = tc_delta(th);
-		*ffcount = ffth->tick_ffcount;
-	} while (gen == 0 || gen != th->th_generation);
+	else {
+		do {
+			th = timehands;
+			gen = th->th_generation;
+			ffth = fftimehands;
+			delta = tc_delta(th);
+			*ffcount = ffth->tick_ffcount;
+		} while (gen == 0 || gen != th->th_generation);
+		*ffcount += delta;
+	}
+}
 
-	*ffcount += delta;
+static __inline uint64_t
+tc_get_timecount_64(struct timecounter *tc)
+{
+	unsigned int count;
+
+	count = tc->tc_get_timecount(tc);
+	return ((uint64_t) count);
 }
 
 void
 binuptime(struct bintime *bt)
 {
 
 	sysclock.binuptime(bt);
 }
 
 void
@@ -1049,20 +1066,29 @@ tc_init(struct timecounter *tc)
 			printf("Timecounter \"%s\" frequency %ju Hz",
 			    tc->tc_name, (uintmax_t)tc->tc_frequency);
 			printf(" -- Insufficient hz, needs at least %u\n", u);
 		}
 	} else if (tc->tc_quality >= 0 || bootverbose) {
 		printf("Timecounter \"%s\" frequency %ju Hz quality %d\n",
 		    tc->tc_name, (uintmax_t)tc->tc_frequency,
 		    tc->tc_quality);
 	}
 
+#ifdef FFCLOCK
+	/*
+	 * XXX Each device timecounter should initialise this function instead.
+	 * Will do it once returning the counter as a uint64_t is approved.
+	 */
+	if (tc->tc_get_timecount_64 == NULL)
+		tc->tc_get_timecount_64 = &tc_get_timecount_64;
+#endif
+
 	tc->tc_next = timecounters;
 	timecounters = tc;
 	/*
 	 * Set up sysctl tree for this counter.
 	 */
 	tc_root = SYSCTL_ADD_NODE(NULL,
 	    SYSCTL_STATIC_CHILDREN(_kern_timecounter_tc), OID_AUTO, tc->tc_name,
 	    CTLFLAG_RW, 0, "timecounter description");
 	SYSCTL_ADD_UINT(NULL, SYSCTL_CHILDREN(tc_root), OID_AUTO,
 	    "mask", CTLFLAG_RD, &(tc->tc_counter_mask), 0,
Index: head/sys/sys/timetc.h
===================================================================
--- head.orig/sys/sys/timetc.h	2011-11-01 15:03:05.000000000 +1100
+++ head/sys/sys/timetc.h	2011-11-01 15:56:44.000000000 +1100
@@ -1,18 +1,24 @@
 /*-
  * ----------------------------------------------------------------------------
  * "THE BEER-WARE LICENSE" (Revision 42):
  * <phk@FreeBSD.ORG> wrote this file.  As long as you retain this notice you
  * can do whatever you want with this stuff. If we meet some day, and you think
  * this stuff is worth it, you can buy me a beer in return.   Poul-Henning Kamp
  * ----------------------------------------------------------------------------
  *
+ * Copyright (C) 2011 The FreeBSD Foundation
+ * All rights reserved.
+ *
+ * Portions of this software were developed by Julien Ridoux at the University
+ * of Melbourne under sponsorship from the FreeBSD Foundation.
+ *
  * $FreeBSD$
  */
 
 #ifndef _SYS_TIMETC_H_
 #define	_SYS_TIMETC_H_
 
 #ifndef _KERNEL
 #error "no user-serviceable parts inside"
 #endif
 
@@ -57,20 +63,28 @@ struct timecounter {
 		 * another timecounter higher means better.  Negative
 		 * means "only use at explicit request".
 		 */
 	u_int			tc_flags;
 #define	TC_FLAGS_C3STOP		1	/* Timer dies in C3. */
 
 	void			*tc_priv;
 		/* Pointer to the timecounter's private parts. */
 	struct timecounter	*tc_next;
 		/* Pointer to the next timecounter. */
+#ifdef FFCLOCK
+	uint64_t (*tc_get_timecount_64)(struct timecounter *);
+		/*
+		 * This function reads the counter and returns a 64 bit unsigned
+		 * int. It is used for the bypass mode, required by feed-forward
+		 * clocks in a virtual system (eg. Xen).
+		 */
+#endif
 };
 
 extern struct timecounter *timecounter;
 extern int tc_min_ticktock_freq; /*
 				  * Minimal tc_ticktock() call frequency,
 				  * required to handle counter wraps.
 				  */
 
 u_int64_t tc_getfrequency(void);
 void	tc_init(struct timecounter *tc);
Index: head/sys/x86/x86/tsc.c
===================================================================
--- head.orig/sys/x86/x86/tsc.c	2011-11-01 15:03:05.000000000 +1100
+++ head/sys/x86/x86/tsc.c	2011-11-01 15:56:44.000000000 +1100
@@ -1,14 +1,18 @@
 /*-
  * Copyright (C) 1998-2003 Poul-Henning Kamp
+ * Copyright (C) 2011 The FreeBSD Foundation
  * All rights reserved.
  *
+ * Portions of this software were developed by Julien Ridoux at the University
+ * of Melbourne under sponsorship from the FreeBSD Foundation.
+ *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
  *    notice, this list of conditions and the following disclaimer.
  * 2. Redistributions in binary form must reproduce the above copyright
  *    notice, this list of conditions and the following disclaimer in the
  *    documentation and/or other materials provided with the distribution.
  *
  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
@@ -76,28 +80,42 @@ SYSCTL_INT(_machdep, OID_AUTO, disable_t
 TUNABLE_INT("machdep.disable_tsc_calibration", &tsc_skip_calibration);
 
 static void tsc_freq_changed(void *arg, const struct cf_level *level,
     int status);
 static void tsc_freq_changing(void *arg, const struct cf_level *level,
     int *status);
 static unsigned tsc_get_timecount(struct timecounter *tc);
 static unsigned tsc_get_timecount_low(struct timecounter *tc);
 static void tsc_levels_changed(void *arg, int unit);
 
+#ifdef FFCLOCK
+static uint64_t tsc_get_timecount_64(struct timecounter *tc);
+
+static struct timecounter tsc_timecounter = {
+	.tc_get_timecount = tsc_get_timecount,
+	.tc_poll_pps = 0,
+	.tc_counter_mask = ~0u,
+	.tc_frequency = 0,
+	.tc_name = "TSC",
+	.tc_quality = 800,
+	.tc_get_timecount_64 = &tsc_get_timecount_64
+};
+#else
 static struct timecounter tsc_timecounter = {
 	tsc_get_timecount,	/* get_timecount */
 	0,			/* no poll_pps */
 	~0u,			/* counter_mask */
 	0,			/* frequency */
 	"TSC",			/* name */
 	800,			/* quality (adjusted in code) */
 };
+#endif
 
 #define	VMW_HVMAGIC		0x564d5868
 #define	VMW_HVPORT		0x5658
 #define	VMW_HVCMD_GETVERSION	10
 #define	VMW_HVCMD_GETHZ		45
 
 static __inline void
 vmware_hvcall(u_int cmd, u_int *p)
 {
 
@@ -597,10 +615,19 @@ tsc_get_timecount(struct timecounter *tc
 
 static u_int
 tsc_get_timecount_low(struct timecounter *tc)
 {
 	uint32_t rv;
 
 	__asm __volatile("rdtsc; shrd %%cl, %%edx, %0"
 	: "=a" (rv) : "c" ((int)(intptr_t)tc->tc_priv) : "edx");
 	return (rv);
 }
+
+#ifdef FFCLOCK
+static uint64_t
+tsc_get_timecount_64(struct timecounter *tc)
+{
+
+	return (rdtsc());
+}
+#endif
