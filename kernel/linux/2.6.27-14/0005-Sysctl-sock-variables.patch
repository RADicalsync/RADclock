From a7e6ff636e59a0b38185bc4ddab1ab752a157a02 Mon Sep 17 00:00:00 2001
From: Julien Ridoux <julien@synclab.org>
Date: Thu, 12 Nov 2009 15:32:40 +1100
Subject: [PATCH RADclock 5/9] Sysctl sock variables

Add the sysctl support for the default timestamping mode of captured
packets and corresponding sock structure fields required.
All modes return a raw vcounter timestamp in addition to the timeval
timestamp.
The timestamping modes are:
RADCLOCK_TSMODE_SYSCLOCK: the timeval timestamp produced by the system
clock
RADCLOCK_TSMODE_RADCLOCK: the timeval timestamp produced by the RADcloc
RADCLOCK_TSMODE_FAIRCOMPARE: the timeval timestamp produced by system
clock and raw timestamp back-to-back
---
 include/linux/sysctl.h     |    3 +++
 include/net/sock.h         |   14 ++++++++++++++
 kernel/sysctl_check.c      |    3 +++
 net/core/sock.c            |   12 ++++++++++++
 net/core/sysctl_net_core.c |   14 ++++++++++++++
 net/ipv4/af_inet.c         |    6 ++++++
 6 files changed, 52 insertions(+), 0 deletions(-)

diff --git a/include/linux/sysctl.h b/include/linux/sysctl.h
index d0437f3..0100c84 100644
--- a/include/linux/sysctl.h
+++ b/include/linux/sysctl.h
@@ -285,6 +285,9 @@ enum
 	NET_CORE_AEVENT_ETIME=20,
 	NET_CORE_AEVENT_RSEQTH=21,
 	NET_CORE_WARNINGS=22,
+#ifdef CONFIG_RADCLOCK
+	NET_CORE_RADCLOCK_DEFAULT_TSMODE=23,
+#endif
 };
 
 /* /proc/sys/net/ethernet */
diff --git a/include/net/sock.h b/include/net/sock.h
index 06c5259..3bb7a8d 100644
--- a/include/net/sock.h
+++ b/include/net/sock.h
@@ -57,6 +57,10 @@
 #include <net/dst.h>
 #include <net/checksum.h>
 
+#ifdef CONFIG_RADCLOCK
+#include <linux/clocksource.h>
+#endif
+
 /*
  * This structure really needs to be cleaned up.
  * Most of it is for TCP, and not used by any of
@@ -263,6 +267,10 @@ struct sock {
 	void			*sk_protinfo;
 	struct timer_list	sk_timer;
 	ktime_t			sk_stamp;
+	#ifdef CONFIG_RADCLOCK
+	vcounter_t		sk_vcount_stamp;
+	ktime_t			sk_stamp_fair; /* Receive the fair tv from skbuff, ns resolution */
+	#endif
 	struct socket		*sk_socket;
 	void			*sk_user_data;
 	struct page		*sk_sndmsg_page;
@@ -279,6 +287,12 @@ struct sock {
   	int			(*sk_backlog_rcv)(struct sock *sk,
 						  struct sk_buff *skb);  
 	void                    (*sk_destruct)(struct sock *sk);
+	#ifdef CONFIG_RADCLOCK
+	#define		RADCLOCK_TSMODE_SYSCLOCK	 1
+	#define		RADCLOCK_TSMODE_RADCLOCK	 2
+	#define		RADCLOCK_TSMODE_FAIRCOMPARE  3
+	int			sk_radclock_tsmode;
+	#endif
 };
 
 /*
diff --git a/kernel/sysctl_check.c b/kernel/sysctl_check.c
index c35da23..5808126 100644
--- a/kernel/sysctl_check.c
+++ b/kernel/sysctl_check.c
@@ -162,6 +162,9 @@ static const struct trans_ctl_table trans_net_core_table[] = {
 	{ NET_CORE_AEVENT_ETIME,	"xfrm_aevent_etime" },
 	{ NET_CORE_AEVENT_RSEQTH,	"xfrm_aevent_rseqth" },
 	{ NET_CORE_WARNINGS,		"warnings" },
+#ifdef CONFIG_RADCLOCK
+	{ NET_CORE_RADCLOCK_DEFAULT_TSMODE,	"radclock_default_tsmode" },
+#endif
 	{},
 };
 
diff --git a/net/core/sock.c b/net/core/sock.c
index 91f8bbc..02c9df7 100644
--- a/net/core/sock.c
+++ b/net/core/sock.c
@@ -208,6 +208,10 @@ __u32 sysctl_rmem_max __read_mostly = SK_RMEM_MAX;
 __u32 sysctl_wmem_default __read_mostly = SK_WMEM_MAX;
 __u32 sysctl_rmem_default __read_mostly = SK_RMEM_MAX;
 
+#ifdef CONFIG_RADCLOCK
+u32 sysctl_radclock_default_tsmode = RADCLOCK_TSMODE_SYSCLOCK;
+#endif
+
 /* Maximal space eaten by iovec or ancilliary data plus some space */
 int sysctl_optmem_max __read_mostly = sizeof(unsigned long)*(2*UIO_MAXIOV+512);
 
@@ -1738,6 +1742,12 @@ void sock_init_data(struct socket *sock, struct sock *sk)
 
 	sk->sk_stamp = ktime_set(-1L, 0);
 
+	#ifdef CONFIG_RADCLOCK
+	sk->sk_radclock_tsmode = sysctl_radclock_default_tsmode;
+	sk->sk_vcount_stamp = 0;
+	sk->sk_stamp_fair = ktime_set(-1L, -1L);
+	#endif
+
 	atomic_set(&sk->sk_refcnt, 1);
 	atomic_set(&sk->sk_drops, 0);
 }
@@ -1778,6 +1788,8 @@ EXPORT_SYMBOL(release_sock);
 
 int sock_get_timestamp(struct sock *sk, struct timeval __user *userstamp)
 {
+	//TODO: RADCLOCK Do calculation for RADCLOCK_TSMODE mode in here
+
 	struct timeval tv;
 	if (!sock_flag(sk, SOCK_TIMESTAMP))
 		sock_enable_timestamp(sk);
diff --git a/net/core/sysctl_net_core.c b/net/core/sysctl_net_core.c
index f686467..8d1ca8d 100644
--- a/net/core/sysctl_net_core.c
+++ b/net/core/sysctl_net_core.c
@@ -14,6 +14,10 @@
 #include <net/sock.h>
 #include <net/xfrm.h>
 
+#ifdef CONFIG_RADCLOCK
+extern u32 sysctl_radclock_default_tsmode;
+#endif
+
 static struct ctl_table net_core_table[] = {
 #ifdef CONFIG_NET
 	{
@@ -140,6 +144,16 @@ static struct ctl_table net_core_table[] = {
 		.mode		= 0644,
 		.proc_handler	= &proc_dointvec
 	},
+#ifdef CONFIG_RADCLOCK
+	{
+		.ctl_name	= NET_CORE_RADCLOCK_DEFAULT_TSMODE,
+		.procname	= "radclock_default_tsmode",
+		.data		= &sysctl_radclock_default_tsmode,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= &proc_dointvec
+	},
+#endif
 	{ .ctl_name = 0 }
 };
 
diff --git a/net/ipv4/af_inet.c b/net/ipv4/af_inet.c
index 8a3ac1f..bbd335c 100644
--- a/net/ipv4/af_inet.c
+++ b/net/ipv4/af_inet.c
@@ -799,6 +799,12 @@ int inet_ioctl(struct socket *sock, unsigned int cmd, unsigned long arg)
 	struct net *net = sock_net(sk);
 
 	switch (cmd) {
+#ifdef CONFIG_RADCLOCK
+		case SIOCGRADCLOCKTSMODE:
+			break;
+		case SIOCSRADCLOCKTSMODE:
+			break;
+#endif
 		case SIOCGSTAMP:
 			err = sock_get_timestamp(sk, (struct timeval __user *)arg);
 			break;
-- 
1.6.0.4

