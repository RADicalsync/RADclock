From 1574ff3b820fb1b553f8fbb528ff8c44f6c02e06 Mon Sep 17 00:00:00 2001
From: Julien Ridoux <julien@synclab.org>
Date: Wed, 18 Aug 2010 06:04:18 +0000
Subject: [PATCH RADclock 4/9] Skbuff vcounter support

Add support for creating raw vcounter timestamps on captured packets
---
 include/linux/skbuff.h |    9 +++++++++
 net/core/skbuff.c      |    8 ++++++++
 2 files changed, 17 insertions(+), 0 deletions(-)

diff --git a/include/linux/skbuff.h b/include/linux/skbuff.h
index 0e000f2..8465e18 100644
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -33,6 +33,10 @@
 #include <linux/imq.h>
 #endif
 
+#ifdef CONFIG_RADCLOCK
+#include <linux/clocksource.h>
+#endif
+
 /* Don't change this without changing skb_csum_unnecessary! */
 #define CHECKSUM_NONE 0
 #define CHECKSUM_UNNECESSARY 1
@@ -338,6 +342,11 @@ struct sk_buff {
 	void			*cb_next;
 #endif
 
+	#ifdef CONFIG_RADCLOCK
+	vcounter_t		vcount_stamp;
+	ktime_t 		tstamp_fair; /* Specific to the FAIR_COMPARE mode, ns resolution */
+	#endif
+
 	unsigned int		len,
 				data_len;
 	__u16			mac_len,
diff --git a/net/core/skbuff.c b/net/core/skbuff.c
index f1b6b41..587c1b8 100644
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -278,6 +278,10 @@ struct sk_buff *__alloc_skb(unsigned int size, gfp_t gfp_mask,
 	skb->head = data;
 	skb->data = data;
 	skb_reset_tail_pointer(skb);
+	#ifdef CONFIG_RADCLOCK
+	skb->vcount_stamp = 0;
+	skb->tstamp_fair = ktime_set(-1L, -1L);
+	#endif
 	skb->end = skb->tail + size;
 	kmemcheck_annotate_bitfield(skb, flags1);
 	kmemcheck_annotate_bitfield(skb, flags2);
@@ -612,6 +616,10 @@ EXPORT_SYMBOL(skb_recycle_check);
 static void __copy_skb_header(struct sk_buff *new, const struct sk_buff *old)
 {
 	new->tstamp		= old->tstamp;
+	#ifdef CONFIG_RADCLOCK
+	new->vcount_stamp 	= old->vcount_stamp;
+	new->tstamp_fair 	= old->tstamp_fair;
+	#endif
 	new->dev		= old->dev;
 	new->transport_header	= old->transport_header;
 	new->network_header	= old->network_header;
-- 
1.5.6.5

