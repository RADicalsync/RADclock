From 855e925301f106e33036c650bf87555dfb58bb66 Mon Sep 17 00:00:00 2001
From: Julien Ridoux <julien@synclab.org>
Date: Wed, 18 Aug 2010 06:41:02 +0000
Subject: [PATCH RADclock 8/9] Syscall get_vcounter get_vcounter_latency

Add get_vcounter() and get_vcounter_latency syscalls to access the
raw vcounter and its latency from user space
---
 arch/x86/include/asm/unistd_32.h   |    4 +++
 arch/x86/include/asm/unistd_64.h   |    6 +++++
 arch/x86/kernel/syscall_table_32.S |    4 +++
 include/linux/syscalls.h           |    9 +++++++
 kernel/time.c                      |   43 ++++++++++++++++++++++++++++++++++++
 5 files changed, 66 insertions(+), 0 deletions(-)

diff --git a/arch/x86/include/asm/unistd_32.h b/arch/x86/include/asm/unistd_32.h
index 732a307..97fc050 100644
--- a/arch/x86/include/asm/unistd_32.h
+++ b/arch/x86/include/asm/unistd_32.h
@@ -342,6 +342,10 @@
 #define __NR_pwritev		334
 #define __NR_rt_tgsigqueueinfo	335
 #define __NR_perf_counter_open	336
+#ifdef CONFIG_RADCLOCK
+#define __NR_get_vcounter	337
+#define __NR_get_vcounter_latency	338
+#endif
 
 #ifdef __KERNEL__
 
diff --git a/arch/x86/include/asm/unistd_64.h b/arch/x86/include/asm/unistd_64.h
index 900e161..29896a1 100644
--- a/arch/x86/include/asm/unistd_64.h
+++ b/arch/x86/include/asm/unistd_64.h
@@ -661,6 +661,12 @@ __SYSCALL(__NR_pwritev, sys_pwritev)
 __SYSCALL(__NR_rt_tgsigqueueinfo, sys_rt_tgsigqueueinfo)
 #define __NR_perf_counter_open			298
 __SYSCALL(__NR_perf_counter_open, sys_perf_counter_open)
+#ifdef CONFIG_RADCLOCK
+#define __NR_get_vcounter			299
+__SYSCALL(__NR_get_vcounter, sys_get_vcounter)
+#define __NR_get_vcounter_latency	300
+__SYSCALL(__NR_get_vcounter_latency, sys_get_vcounter_latency)
+#endif
 
 #ifndef __NO_STUBS
 #define __ARCH_WANT_OLD_READDIR
diff --git a/arch/x86/kernel/syscall_table_32.S b/arch/x86/kernel/syscall_table_32.S
index d51321d..85113b2 100644
--- a/arch/x86/kernel/syscall_table_32.S
+++ b/arch/x86/kernel/syscall_table_32.S
@@ -336,3 +336,7 @@ ENTRY(sys_call_table)
 	.long sys_pwritev
 	.long sys_rt_tgsigqueueinfo	/* 335 */
 	.long sys_perf_counter_open
+#ifdef CONFIG_RADCLOCK
+	.long sys_get_vcounter
+	.long sys_get_vcounter_latency
+#endif
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index 80de700..f1109e2 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -67,6 +67,9 @@ struct perf_counter_attr;
 #include <linux/quota.h>
 #include <linux/key.h>
 #include <trace/syscall.h>
+#ifdef CONFIG_RADCLOCK
+#include <linux/clocksource.h>
+#endif
 
 #define __SC_DECL1(t1, a1)	t1 a1
 #define __SC_DECL2(t2, a2, ...) t2 a2, __SC_DECL1(__VA_ARGS__)
@@ -761,4 +764,10 @@ int kernel_execve(const char *filename, char *const argv[], char *const envp[]);
 asmlinkage long sys_perf_counter_open(
 		struct perf_counter_attr __user *attr_uptr,
 		pid_t pid, int cpu, int group_fd, unsigned long flags);
+
+#ifdef CONFIG_RADCLOCK
+asmlinkage long sys_get_vcounter(vcounter_t *vcounter);
+asmlinkage long sys_get_vcounter_latency(vcounter_t *vcounter, cycle_t *vcount_lat, cycle_t *tsc_lat);
+#endif
+
 #endif
diff --git a/kernel/time.c b/kernel/time.c
index 2951194..2b9ad4d 100644
--- a/kernel/time.c
+++ b/kernel/time.c
@@ -115,6 +115,49 @@ SYSCALL_DEFINE2(gettimeofday, struct timeval __user *, tv,
 	return 0;
 }
 
+
+#ifdef CONFIG_RADCLOCK
+asmlinkage long sys_get_vcounter(vcounter_t *vcounter)
+{
+	vcounter_t vcount;
+	vcount = read_vcounter();
+
+	if (copy_to_user(vcounter, &vcount, sizeof(vcounter_t)))
+		return -EFAULT;
+	return 0;
+}
+
+asmlinkage long sys_get_vcounter_latency(vcounter_t *vcounter, cycle_t *vcount_lat, cycle_t *tsc_lat)
+{
+	vcounter_t vcount;
+	cycle_t tsc1, tsc2, tsc3;
+
+	/* One for fun and warmup */
+	rdtscll(tsc1);
+	__asm __volatile("lfence" ::: "memory");
+	rdtscll(tsc1);
+	__asm __volatile("lfence" ::: "memory");
+	rdtscll(tsc2);
+	__asm __volatile("lfence" ::: "memory");
+	vcount = read_vcounter();
+	__asm __volatile("lfence" ::: "memory");
+	rdtscll(tsc3);
+	__asm __volatile("lfence" ::: "memory");
+
+	tsc1 = tsc2 - tsc1;
+	tsc2 = tsc3 - tsc2;
+
+	if (copy_to_user(vcounter, &vcount, sizeof(vcounter_t)))
+		return -EFAULT;
+	if (copy_to_user(vcount_lat, &tsc2, sizeof(cycle_t)))
+		return -EFAULT;
+	if (copy_to_user(tsc_lat, &tsc1, sizeof(cycle_t)))
+		return -EFAULT;
+	return 0;
+}
+#endif
+
+
 /*
  * Adjust the time obtained from the CMOS to be UTC time instead of
  * local time.
-- 
1.5.6.5

