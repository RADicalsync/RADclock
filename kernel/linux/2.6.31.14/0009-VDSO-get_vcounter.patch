From 244097c9d3b775cec70688cc6b9dc1e9837b8577 Mon Sep 17 00:00:00 2001
From: Julien Ridoux <julien@synclab.org>
Date: Wed, 18 Aug 2010 06:41:33 +0000
Subject: [PATCH RADclock 9/9] VDSO get_vcounter

Support for VDSO get_vcounter() for accessing the raw cumulative
counter from user space.
Changes to libc will be required to take advantage of it.
---
 arch/x86/include/asm/vgtod.h   |    4 ++
 arch/x86/kernel/vsyscall_64.c  |    4 ++
 arch/x86/vdso/vclock_gettime.c |   87 ++++++++++++++++++++++++++++++++++++++++
 3 files changed, 95 insertions(+), 0 deletions(-)

diff --git a/arch/x86/include/asm/vgtod.h b/arch/x86/include/asm/vgtod.h
index 9045ea4..9b1c5a8 100644
--- a/arch/x86/include/asm/vgtod.h
+++ b/arch/x86/include/asm/vgtod.h
@@ -21,6 +21,10 @@ struct vsyscall_gtod_data {
 		cycle_t	mask;
 		u32	mult;
 		u32	shift;
+#ifdef CONFIG_RADCLOCK
+		vcounter_t vcounter_record;
+		vcounter_t vcounter_source_record;
+#endif
 	} clock;
 	struct timespec wall_to_monotonic;
 };
diff --git a/arch/x86/kernel/vsyscall_64.c b/arch/x86/kernel/vsyscall_64.c
index e19a60e..78b649c 100644
--- a/arch/x86/kernel/vsyscall_64.c
+++ b/arch/x86/kernel/vsyscall_64.c
@@ -87,6 +87,10 @@ void update_vsyscall(struct timespec *wall_time, struct clocksource *clock)
 	vsyscall_gtod_data.wall_time_sec = wall_time->tv_sec;
 	vsyscall_gtod_data.wall_time_nsec = wall_time->tv_nsec;
 	vsyscall_gtod_data.wall_to_monotonic = wall_to_monotonic;
+#ifdef CONFIG_RADCLOCK
+	vsyscall_gtod_data.clock.vcounter_record = clock->vcounter_record;
+	vsyscall_gtod_data.clock.vcounter_source_record = clock->vcounter_source_record;
+#endif
 	write_sequnlock_irqrestore(&vsyscall_gtod_data.lock, flags);
 }
 
diff --git a/arch/x86/vdso/vclock_gettime.c b/arch/x86/vdso/vclock_gettime.c
index 723a84f..1f4f47f 100644
--- a/arch/x86/vdso/vclock_gettime.c
+++ b/arch/x86/vdso/vclock_gettime.c
@@ -84,3 +84,90 @@ notrace int __vdso_gettimeofday(struct timeval *tv, struct timezone *tz)
 }
 int gettimeofday(struct timeval *, struct timezone *)
 	__attribute__((weak, alias("__vdso_gettimeofday")));
+
+
+#ifdef CONFIG_RADCLOCK
+/* Copy of the version in kernel/time/timekeeping.c which we cannot directly access */
+/* Only called while gtod->lock is held */
+notrace static inline vcounter_t vread_vcounter_delta(void)
+{
+	return((clocksource_read(clock) - clock->vcounter_source_record) & clock->mask);
+}
+
+/* Copy of the version in kernel/time/timekeeping.c which we cannot directly access */
+notrace static inline vcounter_t vread_vcounter(void)
+{
+	unsigned long seq;
+	vcounter_t vcount;
+
+	do {
+		seq = read_seqbegin(&xtime_lock);
+		vcount = clock->vcounter_record + vread_vcounter_delta();
+	} while (read_seqretry(&xtime_lock, seq));
+
+	return vcount;
+}
+
+notrace int __vdso_get_vcounter(vcounter_t *vcounter)
+{
+	vcounter_t vcount;
+
+	long ret;
+	/* the reference to the gtod sysctl could be changed/removed */
+	if (likely(gtod->sysctl_enabled && gtod->clock.vread)) {
+		vcount = vread_vcounter();
+		*vcounter = vcount;
+		return 0;
+	}
+	asm("syscall" : "=a" (ret) :
+	    "0" (__NR_get_vcounter), "D" (vcounter) : "memory");
+	return ret;
+}
+long get_vcounter(vcounter_t *)
+	__attribute__((weak, alias("__vdso_get_vcounter")));
+
+
+notrace int __vdso_get_vcounter_latency(vcounter_t *vcounter, cycle_t *vcount_lat, cycle_t *tsc_lat)
+{
+/* XEN paravirtualization does not seem to like the rdtscll call, and redefines
+ * it in parvirt.h. It is a bit dodgy but allow compilation ... and not used so
+ * far, it is more a record what should be done.
+ */
+#ifdef CONFIG_PARAVIRT
+#define real_rdtscll(val) (val = __native_read_tsc())
+#else
+#define real_rdtscll(val) rdtscll(val)
+#endif
+	vcounter_t vcount;
+	cycle_t tsc1, tsc2, tsc3;
+
+	long ret;
+	/* the reference to the gtod sysctl could be changed/removed */
+	if (likely(gtod->sysctl_enabled && gtod->clock.vread)) {
+
+		/* One for fun and warmup */
+		real_rdtscll(tsc1);
+		__asm __volatile("lfence" ::: "memory");
+		real_rdtscll(tsc1);
+		__asm __volatile("lfence" ::: "memory");
+		real_rdtscll(tsc2);
+		__asm __volatile("lfence" ::: "memory");
+		vcount = read_vcounter();
+		__asm __volatile("lfence" ::: "memory");
+		real_rdtscll(tsc3);
+		__asm __volatile("lfence" ::: "memory");
+
+		*vcounter = vcount;
+		*vcount_lat = tsc3 - tsc2;
+		*tsc_lat = tsc2 - tsc1;
+
+		return 0;
+	}
+	asm("syscall" : "=a" (ret) :
+	    "0" (__NR_get_vcounter_latency), "D" (vcounter), "S" (vcount_lat), "q" (tsc_lat)  : "memory");
+	return ret;
+}
+long get_vcounter_latency(vcounter_t *, cycle_t *, cycle_t *)
+	__attribute__((weak, alias("__vdso_get_vcounter_latency")));
+
+#endif  /* CONFIG_RADCLOCK */
-- 
1.5.6.5

