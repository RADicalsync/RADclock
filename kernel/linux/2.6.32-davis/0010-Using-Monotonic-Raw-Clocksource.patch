diff --git a/include/linux/clocksource.h b/include/linux/clocksource.h
index bd4caa6..33c1508 100644
--- a/include/linux/clocksource.h
+++ b/include/linux/clocksource.h
@@ -199,8 +199,10 @@ struct clocksource {
 	 * If we have a wide and reliable counter, pass the hardware reading
 	 * through. This is tunable via sysfs
 	 */
-#define VCOUNTER_PT_NO		0
-#define VCOUNTER_PT_YES		1
+#define VCOUNTER_UNKNOWN          0
+#define VCOUNTER_PT_NO		  1
+#define VCOUNTER_PT_YES		  2
+#define VCOUNTER_MONOTONIC_RAW    4 /* TESTING MONOTONIC_RAW */
 	uint8_t vcounter_passthrough;
 	vcounter_t (*read_vcounter)(struct clocksource *cs);
 #endif
diff --git a/kernel/time/clocksource.c b/kernel/time/clocksource.c
index 4f51563..ac0abac 100644
--- a/kernel/time/clocksource.c
+++ b/kernel/time/clocksource.c
@@ -176,6 +176,56 @@ vcounter_t read_vcounter_passthrough(struct clocksource *cs)
 }
 
 
+/** XXX: TESTING PURPOSES ONLY
+ * To test the skew that the CLOCK_MONOTONIC_RAW type of counter might produce
+static inline vcounter_t read_vcounter_rawmonotonic_delta(struct clocksource *cs)
+{
+        struct timespec ts;
+        
+        getrawmonotonic(&ts);
+	
+        return (timespec_to_ns(&ts) - cs->vcounter_source_record);
+}
+*/
+
+
+/** XXX: TESTING PURPOSES ONLY
+ * To test the skew that the CLOCK_MONOTONIC_RAW type of counter might produce
+vcounter_t read_vcounter_rawmonotonic_cumulative(struct clocksource *cs)
+{
+	unsigned long seq;
+	vcounter_t vcount;
+
+	do {
+		seq = read_seqbegin(&xtime_lock);
+		vcount = cs->vcounter_record + read_vcounter_rawmonotonic_delta(cs);
+	} while (read_seqretry(&xtime_lock, seq));
+
+	return vcount;
+}
+*/
+
+
+/** 
+ * XXX: TESTING PURPOSES ONLY
+ * To test the skew that the CLOCK_MONOTONIC_RAW type of counter might produce
+ */
+static vcounter_t read_vcounter_monotonic_raw(struct clocksource *cs)
+{	
+    unsigned long seq;
+    vcounter_t vcount;
+    struct timespec ts;
+
+    do {
+            seq = read_seqbegin(&xtime_lock);
+            getrawmonotonic(&ts);
+            vcount = timespec_to_ns(&ts);
+    } while (read_seqretry(&xtime_lock, seq));
+
+    return vcount;
+}
+
+
 /**
  * read_vcounter - Return the value of the vcounter to functions within the
  * kernel.
@@ -524,22 +574,31 @@ static void clocksource_select(void)
 	 * Keep the current passthrough mode when changing clocksource.
 	 * If curr_clocksource == best, it is a bit useless, but simple code.
 	 */
+
+        /* XXX: TESTING CLOCK_MONOTONIC_RAW */
 	if (curr_clocksource)
 	{
+                printk(KERN_DEBUG "RADClock: Testing Monotonic Raw Counter");
 		if (curr_clocksource->vcounter_passthrough == VCOUNTER_PT_YES)
 		{
 			best->read_vcounter = &read_vcounter_passthrough;
 			best->vcounter_passthrough = VCOUNTER_PT_YES;
 		}
-		if (curr_clocksource->vcounter_passthrough == VCOUNTER_PT_NO)
+                else if (curr_clocksource->vcounter_passthrough == VCOUNTER_PT_NO)
 		{
 			best->read_vcounter = &read_vcounter_cumulative;
 			best->vcounter_passthrough = VCOUNTER_PT_NO;
 		}
+                else /* DEFAULT: if (curr_clocksource->vcounter_passthrough ==
+                         VCOUNTER_PT_MONOTONIC_YES)*/
+		{
+			best->read_vcounter = &read_vcounter_monotonic_raw;
+			best->vcounter_passthrough = VCOUNTER_MONOTONIC_RAW;
+		}
 	}
 	else {
-		best->read_vcounter = &read_vcounter_cumulative;
-		best->vcounter_passthrough = VCOUNTER_PT_NO;
+		best->read_vcounter = &read_vcounter_monotonic_raw;
+		best->vcounter_passthrough = VCOUNTER_MONOTONIC_RAW;
 	}
 #endif
 
@@ -800,16 +859,23 @@ static ssize_t sysfs_override_passthrough_clocksource(struct sys_device *dev,
 		memcpy(override_passthrough, buf, count);
 	override_passthrough[count] = 0;
 
-	if ( !strcmp(override_passthrough, "0"))
+	if ( !strcmp(override_passthrough, "1"))
 	{
 		curr_clocksource->vcounter_passthrough = VCOUNTER_PT_NO;
 		curr_clocksource->read_vcounter = &read_vcounter_cumulative;
 	}
-	if ( !strcmp(override_passthrough, "1"))
+        else if ( !strcmp(override_passthrough, "2"))
 	{
 		curr_clocksource->vcounter_passthrough = VCOUNTER_PT_YES;
 		curr_clocksource->read_vcounter = &read_vcounter_passthrough;
 	}
+        else /* DEFAULT if ( !strcmp(override_passthrough, "2")) */
+        {
+		curr_clocksource->vcounter_passthrough =
+                    VCOUNTER_MONOTONIC_RAW;
+		curr_clocksource->read_vcounter =
+                    &read_vcounter_monotonic_raw;
+        }
 
 	mutex_unlock(&clocksource_mutex);
 
