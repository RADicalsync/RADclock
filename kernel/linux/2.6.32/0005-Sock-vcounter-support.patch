From b31bfba5cc3856fd8383acc9adb185fad5b59d0b Mon Sep 17 00:00:00 2001
From: Julien Ridoux <julien@synclab.org>
Date: Mon, 30 Aug 2010 20:23:13 +1000
Subject: [PATCH RADclock 5/9] Sock vcounter support

Add support to pass vcounter from skbuff to sock, depending on
timestamping mode.
---
 include/net/sock.h |    9 +++++++++
 net/core/sock.c    |    9 +++++++++
 net/ipv4/af_inet.c |    6 ++++++
 3 files changed, 24 insertions(+), 0 deletions(-)

diff --git a/include/net/sock.h b/include/net/sock.h
index 9f96394..19fc4ee 100644
--- a/include/net/sock.h
+++ b/include/net/sock.h
@@ -60,6 +60,10 @@
 #include <net/dst.h>
 #include <net/checksum.h>
 
+#ifdef CONFIG_RADCLOCK
+#include <linux/clocksource.h>
+#endif
+
 /*
  * This structure really needs to be cleaned up.
  * Most of it is for TCP, and not used by any of
@@ -283,6 +287,11 @@ struct sock {
 	void			*sk_protinfo;
 	struct timer_list	sk_timer;
 	ktime_t			sk_stamp;
+	#ifdef CONFIG_RADCLOCK
+	vcounter_t		sk_vcount_stamp;
+	ktime_t			sk_stamp_fair; 	/* Receives the fair tv from skbuff, ns resolution */
+	int			sk_radclock_tsmode;
+	#endif
 	struct socket		*sk_socket;
 	void			*sk_user_data;
 	struct page		*sk_sndmsg_page;
diff --git a/net/core/sock.c b/net/core/sock.c
index 7626b6a..b8b245d 100644
--- a/net/core/sock.c
+++ b/net/core/sock.c
@@ -130,6 +130,10 @@
 #include <net/tcp.h>
 #endif
 
+#ifdef CONFIG_RADCLOCK
+extern int sysfs_ffclock_tsmode;
+#endif
+
 /*
  * Each address family might have different locking rules, so we have
  * one slock key per address family:
@@ -1881,6 +1885,11 @@ void sock_init_data(struct socket *sock, struct sock *sk)
 	sk->sk_sndtimeo		=	MAX_SCHEDULE_TIMEOUT;
 
 	sk->sk_stamp = ktime_set(-1L, 0);
+	#ifdef CONFIG_RADCLOCK
+	sk->sk_radclock_tsmode = sysfs_ffclock_tsmode;
+	sk->sk_vcount_stamp = 0;
+	sk->sk_stamp_fair = ktime_set(-1L, -1L);
+	#endif
 
 	/*
 	 * Before updating sk_refcnt, we must commit prior changes to memory
diff --git a/net/ipv4/af_inet.c b/net/ipv4/af_inet.c
index 57737b8..49f3eb1 100644
--- a/net/ipv4/af_inet.c
+++ b/net/ipv4/af_inet.c
@@ -809,6 +809,12 @@ int inet_ioctl(struct socket *sock, unsigned int cmd, unsigned long arg)
 	struct net *net = sock_net(sk);
 
 	switch (cmd) {
+#ifdef CONFIG_RADCLOCK
+		case SIOCGRADCLOCKTSMODE:
+			break;
+		case SIOCSRADCLOCKTSMODE:
+			break;
+#endif
 	case SIOCGSTAMP:
 		err = sock_get_timestamp(sk, (struct timeval __user *)arg);
 		break;
-- 
1.5.6.5

