From 22e2f82cd3d4df1edcfa5e86c3b1ef959f07ca78 Mon Sep 17 00:00:00 2001
From: Julien Ridoux <julien@synclab.org>
Date: Mon, 30 Aug 2010 20:26:18 +1000
Subject: [PATCH 6/9] RADclock export of packet timestamps

IOCTL or PACKET_MMAP interfaces for passing timestamps to user space
via packet socket (libpcap).
Modification of interfaces to copy the correct timestamps depending
on the RADclock timestamping mode.
Add support for passing raw vcounter stamps created by the kernel.
Implementation of IOCTL get/set timestamping modes for the RADclock.
---
 net/packet/af_packet.c |  142 ++++++++++++++++++++++++++++++++++++++++++++++++
 1 files changed, 142 insertions(+), 0 deletions(-)

diff --git a/net/packet/af_packet.c b/net/packet/af_packet.c
index d9d4970..af9a78a 100644
--- a/net/packet/af_packet.c
+++ b/net/packet/af_packet.c
@@ -88,10 +88,14 @@
 #include <linux/if_vlan.h>
 #include <linux/virtio_net.h>
 #include <linux/errqueue.h>
 #include <linux/net_tstamp.h>

+#ifdef CONFIG_RADCLOCK
+#include <linux/radclock.h>
+#endif
+
 #ifdef CONFIG_INET
 #include <net/inet_common.h>
 #endif

 /*
@@ -1716,10 +1720,14 @@ static int tpacket_rcv(struct sk_buff *skb, struct net_device *dev,
	unsigned short macoff, netoff, hdrlen;
	struct sk_buff *copy_skb = NULL;
	struct timeval tv;
	struct timespec ts;
	struct skb_shared_hwtstamps *shhwtstamps = skb_hwtstamps(skb);
+#ifdef CONFIG_RADCLOCK
+	unsigned short vcountoff;
+	ktime_t rad_ktime;
+#endif

	if (skb->pkt_type == PACKET_LOOPBACK)
		goto drop;

	sk = pt->af_packet_priv;
@@ -1747,17 +1755,35 @@ static int tpacket_rcv(struct sk_buff *skb, struct net_device *dev,
		goto drop_n_restore;
	if (snaplen > res)
		snaplen = res;

	if (sk->sk_type == SOCK_DGRAM) {
+#ifdef CONFIG_RADCLOCK
+/* We would prefer to push the timestamp in the tpacket header instead of
+ * hiding it into the gap between the sockaddr_ll and the mac/net header.
+ * But this needs a new libpcap, so simply ensure we make enough space
+ * for libpcap to play with all of this without it stepping on our
+ * timestamp. Due to the 16bit alignment, in most cases we should not
+ * use more memory.
+ */
+		macoff = netoff = TPACKET_ALIGN(po->tp_hdrlen + 16 + sizeof(vcounter_t)) +
+				po->tp_reserve;
+#else
		macoff = netoff = TPACKET_ALIGN(po->tp_hdrlen) + 16 +
				  po->tp_reserve;
+#endif
	} else {
		unsigned maclen = skb_network_offset(skb);
+#ifdef CONFIG_RADCLOCK
+		netoff = TPACKET_ALIGN(po->tp_hdrlen +
+				       (maclen < 16 ? 16 : maclen) + sizeof(vcounter_t)) +
+			po->tp_reserve;
+#else
		netoff = TPACKET_ALIGN(po->tp_hdrlen +
				       (maclen < 16 ? 16 : maclen)) +
			po->tp_reserve;
+#endif
		macoff = netoff - maclen;
	}
	if (po->tp_version <= TPACKET_V2) {
		if (macoff + snaplen > po->rx_ring.frame_size) {
			if (po->copy_thresh &&
@@ -1799,10 +1825,27 @@ static int tpacket_rcv(struct sk_buff *skb, struct net_device *dev,
	}
	spin_unlock(&sk->sk_receive_queue.lock);

	skb_copy_bits(skb, 0, h.raw + macoff, snaplen);

+#ifdef CONFIG_RADCLOCK
+	/* Provide a timeval stamp build based on the RADclock or a timestamp for
+	 * fair comparison. Replace existing timestamp in the skbuff if in the right
+	 * mode. Default is to return normal stamp.
+	 */
+	switch ( sk->sk_radclock_tsmode ) {
+	case RADCLOCK_TSMODE_RADCLOCK:
+		radclock_fill_ktime(skb->vcount_stamp, &rad_ktime);
+		skb->tstamp = rad_ktime;
+		break;
+
+	case RADCLOCK_TSMODE_FAIRCOMPARE:
+		skb->tstamp = skb->tstamp_fair;
+		break;
+	}
+#endif
+
	switch (po->tp_version) {
	case TPACKET_V1:
		h.h1->tp_len = skb->len;
		h.h1->tp_snaplen = snaplen;
		h.h1->tp_mac = macoff;
@@ -1882,10 +1925,43 @@ static int tpacket_rcv(struct sk_buff *skb, struct net_device *dev,
	sll->sll_pkttype = skb->pkt_type;
	if (unlikely(po->origdev))
		sll->sll_ifindex = orig_dev->ifindex;
	else
		sll->sll_ifindex = dev->ifindex;
+#ifdef CONFIG_RADCLOCK
+	/* Insert vcount timestamp in here. It has to be inserted in front of the
+	 * pointer libpcap passes to the user callback. Because libpcap does write
+	 * in the gap between the SLL header and tp_mac, things are a bit messy.
+	 * Mimic libpcap logic in here, which will hopefully not change ...
+	 * Clearly this code depends on libpcap design, a poor feature, but no
+	 * other choice so far.
+	 */
+	vcountoff = macoff;
+
+	/* If the socket has been open in mode DGRAM, libpcap will add a
+	 * sll_header (16bytes) (cooked interface)
+	 */
+	if (sk->sk_type == SOCK_DGRAM)
+		vcountoff -= 16;
+
+	/* If packet of type 2 and vlan and enough data, libpcap will rebuild
+	 * the vlan tag in the header
+	 */
+	if ( po->tp_version == TPACKET_V2 &&
+		h.h2->tp_vlan_tci && h.h2->tp_snaplen >= 2 * 6 /*ETH_ALEN*/)
+	{
+		vcountoff -= 4 /*VLAN_TAG_LEN*/;
+	}
+
+	if (po->tp_version == TPACKET_V3)
+		printk("FIXME: need to implement TPACKET_V3 (%s:%d)\n", __FILE__, __LINE__);
+
+	/* Copy the vcount stamp just before where the mac/sll header wil be */
+	vcountoff -= sizeof(vcounter_t);
+	memcpy(h.raw + vcountoff, &(skb->vcount_stamp), sizeof(vcounter_t));
+#endif
+

	smp_mb();
 #if ARCH_IMPLEMENTS_FLUSH_DCACHE_PAGE == 1
	{
		u8 *start, *end;
@@ -2774,10 +2850,19 @@ static int packet_recvmsg(struct kiocb *iocb, struct socket *sock,

	err = skb_copy_datagram_iovec(skb, 0, msg->msg_iov, copied);
	if (err)
		goto out_free;

+#ifdef CONFIG_RADCLOCK
+	/* Pass the two extra raw timestamps specific to the RADCLOCK to the socket:
+	 * the raw vcounter and the timeval stamps used in the
+	 * RADCLOCK_TSMODE_FAIRCOMPARE mode.
+	 */
+	sk->sk_vcount_stamp = skb->vcount_stamp;
+	sk->sk_stamp_fair 	= skb->tstamp_fair;
+#endif
+
	sock_recv_ts_and_drops(msg, sk, skb);

	if (msg->msg_name)
		memcpy(msg->msg_name, &PACKET_SKB_CB(skb)->sa,
		       msg->msg_namelen);
@@ -3395,14 +3480,71 @@ static int packet_ioctl(struct socket *sock, unsigned int cmd,
			amount = skb->len;
		spin_unlock_bh(&sk->sk_receive_queue.lock);
		return put_user(amount, (int __user *)arg);
	}
	case SIOCGSTAMP:
+#ifdef CONFIG_RADCLOCK
+			if (sk->sk_radclock_tsmode == RADCLOCK_TSMODE_RADCLOCK)
+			{
+				/* Provide a timeval stamp build based on the  RADclock */
+				radclock_fill_ktime(sk->sk_vcount_stamp, &(sk->sk_stamp));
+
+			}
+			else if (sk->sk_radclock_tsmode == RADCLOCK_TSMODE_FAIRCOMPARE)
+			{
+				/* We are in FAIRCOMPARE mode so happily overwrite the timestamp
+				 * that is returned right below
+				 */
+				sk->sk_stamp = sk->sk_stamp_fair;
+			}
+#endif
		return sock_get_timestamp(sk, (struct timeval __user *)arg);
	case SIOCGSTAMPNS:
+#ifdef CONFIG_RADCLOCK
+			if (sk->sk_radclock_tsmode == RADCLOCK_TSMODE_RADCLOCK)
+			{
+				/* Provide a timeval stamp build based on the  RADclock */
+				radclock_fill_ktime(sk->sk_vcount_stamp, &(sk->sk_stamp));
+
+			}
+			else if (sk->sk_radclock_tsmode == RADCLOCK_TSMODE_FAIRCOMPARE)
+			{
+				/* We are in FAIRCOMPARE mode so happily overwrite the timestamp
+				 * that is returned right below
+				 */
+				sk->sk_stamp = sk->sk_stamp_fair;
+			}
+#endif
		return sock_get_timestampns(sk, (struct timespec __user *)arg);

+#ifdef CONFIG_RADCLOCK
+		case SIOCSRADCLOCKTSMODE:
+		{
+			long mode;
+			mode = *((long *)arg);
+			switch (mode)
+			{
+				case RADCLOCK_TSMODE_FAIRCOMPARE:
+				case RADCLOCK_TSMODE_SYSCLOCK:
+				case RADCLOCK_TSMODE_RADCLOCK:
+					sk->sk_radclock_tsmode = mode;
+					break;
+				default:
+					return -EINVAL;
+			}
+			printk(KERN_DEBUG "RADclock: Swapping PACKET socket to mode %d\n", sk->sk_radclock_tsmode );
+			*(long *)arg = mode;
+
+			return 0;
+		}
+		case SIOCGRADCLOCKTSMODE:
+		{
+			*((long *)arg) = sk->sk_radclock_tsmode ;
+			return 0;
+		}
+#endif
+
 #ifdef CONFIG_INET
	case SIOCADDRT:
	case SIOCDELRT:
	case SIOCDARP:
	case SIOCGARP:
--
1.7.5.4
