##
## This is the default configuration file for the RADclock
##

#----------------------------------------------------------------------------#
# Package version. Do not modify this line.
radclock_version = v0.4.x-298-g2726181
#----------------------------------------------------------------------------#


# Verbosity level of the radclock daemon.
#	quiet : only errors and warnings are logged
#	normal: adaptive logging of events
#	high  : include debug messages
verbose_level = normal




#----------------------------------------------------------------------------#
# Synchronisation Client parameters
#----------------------------------------------------------------------------#

# Specify the type of underlying synchronisation used.
# Note that piggybacking requires an ntp daemon running and is then
# incompatible with the RADclock serving clients over the network or 
# adjusting the system clock. Piggybacking disables these functions.
#	piggy   : piggybacking on running ntp daemon
#	ntp     : RADclock uses NTP protocol
#	ieee1588: RADclock uses IEEE 1588 protocol - NOT IMPLEMENTED YET
#	pps     : RADclock listens to PPS - NOT IMPLEMENTED YET
#	vm_udp  : RADclock communicates with master radclock for clock data over udp
#	xen     : RADclock communicates with master radclock for clock data over xenstore
#	vmware  : RADclock communicates with master radclock for clock data over vmci
synchronisation_type = ntp

# The polling period specifies the time interval at which
# the requests for time are sent to the server (value in seconds)
polling_period = 16

# Hostname or IP address (uses lookup name resolution).
# Automatic detection will be attempted if not specified.
#hostname = numbat.cubinlab.ee.unimelb.edu.au

# Time server answering the requests from this client.
# Can be a host name or an IP address (uses lookup name resolution).
#time_server = ntp.cubinlab.ee.unimelb.edu.au




#----------------------------------------------------------------------------#
# Synchronisation Server parameters
#----------------------------------------------------------------------------#

# IPC server.
# Serves time to the kernel and other processes.
#	on : Start service - makes the RADclock available to other programs
#	off: Stop service  - useful when replaying traces
ipc_server = on

# VM UDP server.
# Serves clock data to radclock clients over the network.
#	on : runs a VM UDP server for guests
#	off: no server running
vm_udp_server = off

# File containing list of VM UDP clients in the case of VM UDP server
# Name or IP address of master radclock in the case of synctype = vm_udp
#vm_udp_list = vm_udp_list

# XEN server.
# Serves clock data to radclock clients over the xenstore.
#	on : runs a XEN server for guests
#	off: no server running
xen_server = off

# VMWARE server.
# Serves clock data to radclock clients over a VMCI socket.
#	on : runs a VMWARE server for guests
#	off: no server running
vmware_server = off

# NTP server.
# Serves time to radclock clients over the network.
#	on : runs a NTP server for remote clients
#	off: no server running
ntp_server = on

# System clock.
# Let the RADclock adjust the system clock, make sure no other synchronisation
# daemon is running, especially the ntp daemon.
# Note that this feature relies on standard kernel calls to adjust the time and
# is completely different from the IPC server provided. This feature is essentially
# provided to maintain system time for non critical operations. If you care about
# synchronisation, turn the IPC server on and use the libradclock API
# Also note that system clock time causality may break since the system clock will
# be set on RADclock restart. The system clock will tick monotically afterwards.
#	on : adjust the system clock
#	off: does not adjust the system clock (to use with NTP piggybacking)
adjust_system_clock = on




#----------------------------------------------------------------------------#
# Environment and Tuning parameters
#----------------------------------------------------------------------------#

# Temperature environment and hardware quality.
# Keywods accepted are: poor, good, excellent.
# This setting overrides temperature and hardware expert mode (default behavior). 
temperature_quality = good

# EXPERIMENTAL.
# Temperature environment and hardware quality - EXPERT.
# This settings are over-written by the temperature_quality keyword.
#ts_limit = 0.000015000
#skm_scale = 1024.000000000
#rate_error_bound = 0.000000500
#best_skm_rate = 0.000000200
#offset_ratio = 6
#plocal_quality = 0.000000800

# For a quick start, the initial value of the period of the counter (in seconds). 
init_period_estimate = 1e-09

# Estimation of the asym within the host (in seconds). 
host_asymmetry = 0.000000

# Estimation of the network asym (in seconds). 
network_asymmetry = 0.000000




#----------------------------------------------------------------------------#
# Input / Output parameters
#----------------------------------------------------------------------------#

# Network interface.
# Specify a different interface (xl0, eth0, ...)
# If none, the RADclock will lookup for a default one.
#network_device = xl0

# Synchronisation data input file (modified pcap format).
# Replay mode requires a file produced by the RADclock.
#sync_input_pcap = sync_input.pcap

# Synchronisation data input file (ascii format).
# Replay mode requires a file produced by the RADclock.
#sync_input_ascii = sync_input.ascii

# Synchronisation data output file (modified pcap format).
#sync_output_pcap = sync_output.pcap

# Synchronisation data output file (ascii format).
#sync_output_ascii = sync_output.ascii

# Internal clock data output file (ascii format).
#clock_output_ascii = clock_output.ascii

